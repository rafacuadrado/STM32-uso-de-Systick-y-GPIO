
Practica1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031c8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003350  08003350  00004350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003398  08003398  00005010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003398  08003398  00004398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080033a0  080033a0  00005010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080033a0  080033a0  000043a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080033a4  080033a4  000043a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080033a8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  20000010  080033b8  00005010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000bc  080033b8  000050bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a5a3  00000000  00000000  00005040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a28  00000000  00000000  0000f5e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000910  00000000  00000000  00011010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006e5  00000000  00000000  00011920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000255b2  00000000  00000000  00012005  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b367  00000000  00000000  000375b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e5eb6  00000000  00000000  0004291e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001287d4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023b0  00000000  00000000  00128818  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0012abc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003338 	.word	0x08003338

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08003338 	.word	0x08003338

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <ReadJoy>:
uint8_t antes = GPIO_PIN_SET;
uint8_t actual;



uint8_t ReadJoy(){
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0

	//Queremos que cada vez que reciba un 0
	antes=actual;
 80004f8:	4b14      	ldr	r3, [pc, #80]	@ (800054c <ReadJoy+0x58>)
 80004fa:	781a      	ldrb	r2, [r3, #0]
 80004fc:	4b14      	ldr	r3, [pc, #80]	@ (8000550 <ReadJoy+0x5c>)
 80004fe:	701a      	strb	r2, [r3, #0]
	actual = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8000500:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000504:	4813      	ldr	r0, [pc, #76]	@ (8000554 <ReadJoy+0x60>)
 8000506:	f000 fe79 	bl	80011fc <HAL_GPIO_ReadPin>
 800050a:	4603      	mov	r3, r0
 800050c:	461a      	mov	r2, r3
 800050e:	4b0f      	ldr	r3, [pc, #60]	@ (800054c <ReadJoy+0x58>)
 8000510:	701a      	strb	r2, [r3, #0]
	if(cont==4){
 8000512:	4b11      	ldr	r3, [pc, #68]	@ (8000558 <ReadJoy+0x64>)
 8000514:	781b      	ldrb	r3, [r3, #0]
 8000516:	2b04      	cmp	r3, #4
 8000518:	d102      	bne.n	8000520 <ReadJoy+0x2c>
		cont=0;
 800051a:	4b0f      	ldr	r3, [pc, #60]	@ (8000558 <ReadJoy+0x64>)
 800051c:	2200      	movs	r2, #0
 800051e:	701a      	strb	r2, [r3, #0]
	}
	if(actual!=antes&&actual==GPIO_PIN_RESET){
 8000520:	4b0a      	ldr	r3, [pc, #40]	@ (800054c <ReadJoy+0x58>)
 8000522:	781a      	ldrb	r2, [r3, #0]
 8000524:	4b0a      	ldr	r3, [pc, #40]	@ (8000550 <ReadJoy+0x5c>)
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	429a      	cmp	r2, r3
 800052a:	d00c      	beq.n	8000546 <ReadJoy+0x52>
 800052c:	4b07      	ldr	r3, [pc, #28]	@ (800054c <ReadJoy+0x58>)
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	2b00      	cmp	r3, #0
 8000532:	d108      	bne.n	8000546 <ReadJoy+0x52>
		cont++;
 8000534:	4b08      	ldr	r3, [pc, #32]	@ (8000558 <ReadJoy+0x64>)
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	3301      	adds	r3, #1
 800053a:	b2da      	uxtb	r2, r3
 800053c:	4b06      	ldr	r3, [pc, #24]	@ (8000558 <ReadJoy+0x64>)
 800053e:	701a      	strb	r2, [r3, #0]
		return 0;
	}



	return cont;
 8000540:	4b05      	ldr	r3, [pc, #20]	@ (8000558 <ReadJoy+0x64>)
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	e000      	b.n	8000548 <ReadJoy+0x54>
		return 0;
 8000546:	2300      	movs	r3, #0
}
 8000548:	4618      	mov	r0, r3
 800054a:	bd80      	pop	{r7, pc}
 800054c:	2000002d 	.word	0x2000002d
 8000550:	20000000 	.word	0x20000000
 8000554:	48000800 	.word	0x48000800
 8000558:	2000002c 	.word	0x2000002c

0800055c <LED_On>:


#include "stm32l4xx_hal.h"


void LED_On (uint8_t nLed) {
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
 8000562:	4603      	mov	r3, r0
 8000564:	71fb      	strb	r3, [r7, #7]
	switch(nLed){
 8000566:	79fb      	ldrb	r3, [r7, #7]
 8000568:	2b02      	cmp	r3, #2
 800056a:	d014      	beq.n	8000596 <LED_On+0x3a>
 800056c:	2b02      	cmp	r3, #2
 800056e:	dc19      	bgt.n	80005a4 <LED_On+0x48>
 8000570:	2b00      	cmp	r3, #0
 8000572:	d002      	beq.n	800057a <LED_On+0x1e>
 8000574:	2b01      	cmp	r3, #1
 8000576:	d007      	beq.n	8000588 <LED_On+0x2c>
		break;
	case 2:
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_9,SET);
		break;
	}
}
 8000578:	e014      	b.n	80005a4 <LED_On+0x48>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,SET);
 800057a:	2201      	movs	r2, #1
 800057c:	2120      	movs	r1, #32
 800057e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000582:	f000 fe53 	bl	800122c <HAL_GPIO_WritePin>
		break;
 8000586:	e00d      	b.n	80005a4 <LED_On+0x48>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,SET);
 8000588:	2201      	movs	r2, #1
 800058a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800058e:	4807      	ldr	r0, [pc, #28]	@ (80005ac <LED_On+0x50>)
 8000590:	f000 fe4c 	bl	800122c <HAL_GPIO_WritePin>
		break;
 8000594:	e006      	b.n	80005a4 <LED_On+0x48>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_9,SET);
 8000596:	2201      	movs	r2, #1
 8000598:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800059c:	4804      	ldr	r0, [pc, #16]	@ (80005b0 <LED_On+0x54>)
 800059e:	f000 fe45 	bl	800122c <HAL_GPIO_WritePin>
		break;
 80005a2:	bf00      	nop
}
 80005a4:	bf00      	nop
 80005a6:	3708      	adds	r7, #8
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	48000400 	.word	0x48000400
 80005b0:	48000800 	.word	0x48000800

080005b4 <LED_Off>:

void LED_Off (uint8_t nLed) {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	4603      	mov	r3, r0
 80005bc:	71fb      	strb	r3, [r7, #7]
	switch(nLed){
 80005be:	79fb      	ldrb	r3, [r7, #7]
 80005c0:	2b02      	cmp	r3, #2
 80005c2:	d014      	beq.n	80005ee <LED_Off+0x3a>
 80005c4:	2b02      	cmp	r3, #2
 80005c6:	dc19      	bgt.n	80005fc <LED_Off+0x48>
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d002      	beq.n	80005d2 <LED_Off+0x1e>
 80005cc:	2b01      	cmp	r3, #1
 80005ce:	d007      	beq.n	80005e0 <LED_Off+0x2c>
		break;
	case 2:
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_9,RESET);
		break;
	}
}
 80005d0:	e014      	b.n	80005fc <LED_Off+0x48>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,RESET);
 80005d2:	2200      	movs	r2, #0
 80005d4:	2120      	movs	r1, #32
 80005d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005da:	f000 fe27 	bl	800122c <HAL_GPIO_WritePin>
		break;
 80005de:	e00d      	b.n	80005fc <LED_Off+0x48>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,RESET);
 80005e0:	2200      	movs	r2, #0
 80005e2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005e6:	4807      	ldr	r0, [pc, #28]	@ (8000604 <LED_Off+0x50>)
 80005e8:	f000 fe20 	bl	800122c <HAL_GPIO_WritePin>
		break;
 80005ec:	e006      	b.n	80005fc <LED_Off+0x48>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_9,RESET);
 80005ee:	2200      	movs	r2, #0
 80005f0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80005f4:	4804      	ldr	r0, [pc, #16]	@ (8000608 <LED_Off+0x54>)
 80005f6:	f000 fe19 	bl	800122c <HAL_GPIO_WritePin>
		break;
 80005fa:	bf00      	nop
}
 80005fc:	bf00      	nop
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	48000400 	.word	0x48000400
 8000608:	48000800 	.word	0x48000800

0800060c <animation1.0>:
  */
int main(void)
{

  /* USER CODE BEGIN 1 */
	void animation1(void){
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	f8c7 c004 	str.w	ip, [r7, #4]
		LED_On(0);
 8000616:	2000      	movs	r0, #0
 8000618:	f7ff ffa0 	bl	800055c <LED_On>
		LED_On(1);
 800061c:	2001      	movs	r0, #1
 800061e:	f7ff ff9d 	bl	800055c <LED_On>
		LED_On(2);
 8000622:	2002      	movs	r0, #2
 8000624:	f7ff ff9a 	bl	800055c <LED_On>
		HAL_Delay(1500);
 8000628:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 800062c:	f000 fb32 	bl	8000c94 <HAL_Delay>
		LED_Off(0);
 8000630:	2000      	movs	r0, #0
 8000632:	f7ff ffbf 	bl	80005b4 <LED_Off>
		LED_Off(1);
 8000636:	2001      	movs	r0, #1
 8000638:	f7ff ffbc 	bl	80005b4 <LED_Off>
		LED_Off(2);
 800063c:	2002      	movs	r0, #2
 800063e:	f7ff ffb9 	bl	80005b4 <LED_Off>
	}
 8000642:	bf00      	nop
 8000644:	3708      	adds	r7, #8
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
	...

0800064c <main>:
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
int main(void)
 8000652:	f107 0310 	add.w	r3, r7, #16
 8000656:	603b      	str	r3, [r7, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000658:	f000 faa7 	bl	8000baa <HAL_Init>
  /* USER CODE BEGIN Init */
uint8_t res;
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800065c:	f000 f8aa 	bl	80007b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000660:	f000 f91e 	bl	80008a0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000664:	f000 f8ec 	bl	8000840 <MX_USART1_UART_Init>
//		  LED_Off(nLed);
//		  HAL_Delay(200);
//		  LED_Toggle(nLed);
//		  HAL_Delay(200);
//	  }
	  res = ReadJoy();
 8000668:	f7ff ff44 	bl	80004f4 <ReadJoy>
 800066c:	4603      	mov	r3, r0
 800066e:	71fb      	strb	r3, [r7, #7]
	  switch(res){
 8000670:	79fb      	ldrb	r3, [r7, #7]
 8000672:	3b01      	subs	r3, #1
 8000674:	2b03      	cmp	r3, #3
 8000676:	d8f7      	bhi.n	8000668 <main+0x1c>
 8000678:	a201      	add	r2, pc, #4	@ (adr r2, 8000680 <main+0x34>)
 800067a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800067e:	bf00      	nop
 8000680:	08000691 	.word	0x08000691
 8000684:	0800069b 	.word	0x0800069b
 8000688:	080006a5 	.word	0x080006a5
 800068c:	080006af 	.word	0x080006af
		  case 1:
			  animation1();
 8000690:	463b      	mov	r3, r7
 8000692:	469c      	mov	ip, r3
 8000694:	f7ff ffba 	bl	800060c <animation1.0>
			  break;
 8000698:	e00f      	b.n	80006ba <main+0x6e>
		  case 2:
			  animation2();
 800069a:	463b      	mov	r3, r7
 800069c:	469c      	mov	ip, r3
 800069e:	f000 f80d 	bl	80006bc <animation2.1>
		  	  break;
 80006a2:	e00a      	b.n	80006ba <main+0x6e>
		  case 3:
			  animation3();
 80006a4:	463b      	mov	r3, r7
 80006a6:	469c      	mov	ip, r3
 80006a8:	f000 f832 	bl	8000710 <animation3.2>
			  break;
 80006ac:	e005      	b.n	80006ba <main+0x6e>
		  case 4:
			  animation4();
 80006ae:	463b      	mov	r3, r7
 80006b0:	469c      	mov	ip, r3
 80006b2:	f000 f854 	bl	800075e <animation4.3>
			  break;
 80006b6:	bf00      	nop
 80006b8:	e7d6      	b.n	8000668 <main+0x1c>
	  res = ReadJoy();
 80006ba:	e7d5      	b.n	8000668 <main+0x1c>

080006bc <animation2.1>:
	void animation2(void){
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	f8c7 c004 	str.w	ip, [r7, #4]
		LED_On(0);
 80006c6:	2000      	movs	r0, #0
 80006c8:	f7ff ff48 	bl	800055c <LED_On>
		HAL_Delay(150);
 80006cc:	2096      	movs	r0, #150	@ 0x96
 80006ce:	f000 fae1 	bl	8000c94 <HAL_Delay>
		LED_On(1);
 80006d2:	2001      	movs	r0, #1
 80006d4:	f7ff ff42 	bl	800055c <LED_On>
		HAL_Delay(150);
 80006d8:	2096      	movs	r0, #150	@ 0x96
 80006da:	f000 fadb 	bl	8000c94 <HAL_Delay>
		LED_On(2);
 80006de:	2002      	movs	r0, #2
 80006e0:	f7ff ff3c 	bl	800055c <LED_On>
		HAL_Delay(150);
 80006e4:	2096      	movs	r0, #150	@ 0x96
 80006e6:	f000 fad5 	bl	8000c94 <HAL_Delay>
		LED_Off(0);
 80006ea:	2000      	movs	r0, #0
 80006ec:	f7ff ff62 	bl	80005b4 <LED_Off>
		HAL_Delay(150);
 80006f0:	2096      	movs	r0, #150	@ 0x96
 80006f2:	f000 facf 	bl	8000c94 <HAL_Delay>
		LED_Off(1);
 80006f6:	2001      	movs	r0, #1
 80006f8:	f7ff ff5c 	bl	80005b4 <LED_Off>
		HAL_Delay(150);
 80006fc:	2096      	movs	r0, #150	@ 0x96
 80006fe:	f000 fac9 	bl	8000c94 <HAL_Delay>
		LED_Off(2);
 8000702:	2002      	movs	r0, #2
 8000704:	f7ff ff56 	bl	80005b4 <LED_Off>
	}
 8000708:	bf00      	nop
 800070a:	3708      	adds	r7, #8
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}

08000710 <animation3.2>:
	void animation3(void){
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	f8c7 c004 	str.w	ip, [r7, #4]
		LED_On(0);
 800071a:	2000      	movs	r0, #0
 800071c:	f7ff ff1e 	bl	800055c <LED_On>
		HAL_Delay(500);
 8000720:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000724:	f000 fab6 	bl	8000c94 <HAL_Delay>
		LED_Off(0);
 8000728:	2000      	movs	r0, #0
 800072a:	f7ff ff43 	bl	80005b4 <LED_Off>
		LED_On(1);
 800072e:	2001      	movs	r0, #1
 8000730:	f7ff ff14 	bl	800055c <LED_On>
		HAL_Delay(500);
 8000734:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000738:	f000 faac 	bl	8000c94 <HAL_Delay>
		LED_Off(1);
 800073c:	2001      	movs	r0, #1
 800073e:	f7ff ff39 	bl	80005b4 <LED_Off>
		LED_On(2);
 8000742:	2002      	movs	r0, #2
 8000744:	f7ff ff0a 	bl	800055c <LED_On>
		HAL_Delay(500);
 8000748:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800074c:	f000 faa2 	bl	8000c94 <HAL_Delay>
		LED_Off(2);
 8000750:	2002      	movs	r0, #2
 8000752:	f7ff ff2f 	bl	80005b4 <LED_Off>
	}
 8000756:	bf00      	nop
 8000758:	3708      	adds	r7, #8
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}

0800075e <animation4.3>:
	void animation4(void){
 800075e:	b580      	push	{r7, lr}
 8000760:	b084      	sub	sp, #16
 8000762:	af00      	add	r7, sp, #0
 8000764:	f8c7 c004 	str.w	ip, [r7, #4]
		for(int i = 0; i<25; i++){
 8000768:	2300      	movs	r3, #0
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	e01a      	b.n	80007a4 <animation4.3+0x46>
			LED_On(0);
 800076e:	2000      	movs	r0, #0
 8000770:	f7ff fef4 	bl	800055c <LED_On>
			LED_On(1);
 8000774:	2001      	movs	r0, #1
 8000776:	f7ff fef1 	bl	800055c <LED_On>
			LED_On(2);
 800077a:	2002      	movs	r0, #2
 800077c:	f7ff feee 	bl	800055c <LED_On>
			HAL_Delay(150);
 8000780:	2096      	movs	r0, #150	@ 0x96
 8000782:	f000 fa87 	bl	8000c94 <HAL_Delay>
			LED_Off(0);
 8000786:	2000      	movs	r0, #0
 8000788:	f7ff ff14 	bl	80005b4 <LED_Off>
			LED_Off(1);
 800078c:	2001      	movs	r0, #1
 800078e:	f7ff ff11 	bl	80005b4 <LED_Off>
			LED_Off(2);
 8000792:	2002      	movs	r0, #2
 8000794:	f7ff ff0e 	bl	80005b4 <LED_Off>
			HAL_Delay(150);
 8000798:	2096      	movs	r0, #150	@ 0x96
 800079a:	f000 fa7b 	bl	8000c94 <HAL_Delay>
		for(int i = 0; i<25; i++){
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	3301      	adds	r3, #1
 80007a2:	60fb      	str	r3, [r7, #12]
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	2b18      	cmp	r3, #24
 80007a8:	dde1      	ble.n	800076e <animation4.3+0x10>
	}
 80007aa:	bf00      	nop
 80007ac:	bf00      	nop
 80007ae:	3710      	adds	r7, #16
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}

080007b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b096      	sub	sp, #88	@ 0x58
 80007b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ba:	f107 0314 	add.w	r3, r7, #20
 80007be:	2244      	movs	r2, #68	@ 0x44
 80007c0:	2100      	movs	r1, #0
 80007c2:	4618      	mov	r0, r3
 80007c4:	f002 fd8b 	bl	80032de <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c8:	463b      	mov	r3, r7
 80007ca:	2200      	movs	r2, #0
 80007cc:	601a      	str	r2, [r3, #0]
 80007ce:	605a      	str	r2, [r3, #4]
 80007d0:	609a      	str	r2, [r3, #8]
 80007d2:	60da      	str	r2, [r3, #12]
 80007d4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007d6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80007da:	f000 fd4d 	bl	8001278 <HAL_PWREx_ControlVoltageScaling>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80007e4:	f000 f8ee 	bl	80009c4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80007e8:	2310      	movs	r3, #16
 80007ea:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80007ec:	2301      	movs	r3, #1
 80007ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80007f0:	2300      	movs	r3, #0
 80007f2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80007f4:	2360      	movs	r3, #96	@ 0x60
 80007f6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007f8:	2300      	movs	r3, #0
 80007fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007fc:	f107 0314 	add.w	r3, r7, #20
 8000800:	4618      	mov	r0, r3
 8000802:	f000 fd8f 	bl	8001324 <HAL_RCC_OscConfig>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 800080c:	f000 f8da 	bl	80009c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000810:	230f      	movs	r3, #15
 8000812:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000814:	2300      	movs	r3, #0
 8000816:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000818:	2300      	movs	r3, #0
 800081a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800081c:	2300      	movs	r3, #0
 800081e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000820:	2300      	movs	r3, #0
 8000822:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000824:	463b      	mov	r3, r7
 8000826:	2100      	movs	r1, #0
 8000828:	4618      	mov	r0, r3
 800082a:	f001 f957 	bl	8001adc <HAL_RCC_ClockConfig>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000834:	f000 f8c6 	bl	80009c4 <Error_Handler>
  }
}
 8000838:	bf00      	nop
 800083a:	3758      	adds	r7, #88	@ 0x58
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}

08000840 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000844:	4b14      	ldr	r3, [pc, #80]	@ (8000898 <MX_USART1_UART_Init+0x58>)
 8000846:	4a15      	ldr	r2, [pc, #84]	@ (800089c <MX_USART1_UART_Init+0x5c>)
 8000848:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800084a:	4b13      	ldr	r3, [pc, #76]	@ (8000898 <MX_USART1_UART_Init+0x58>)
 800084c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000850:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000852:	4b11      	ldr	r3, [pc, #68]	@ (8000898 <MX_USART1_UART_Init+0x58>)
 8000854:	2200      	movs	r2, #0
 8000856:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000858:	4b0f      	ldr	r3, [pc, #60]	@ (8000898 <MX_USART1_UART_Init+0x58>)
 800085a:	2200      	movs	r2, #0
 800085c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800085e:	4b0e      	ldr	r3, [pc, #56]	@ (8000898 <MX_USART1_UART_Init+0x58>)
 8000860:	2200      	movs	r2, #0
 8000862:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000864:	4b0c      	ldr	r3, [pc, #48]	@ (8000898 <MX_USART1_UART_Init+0x58>)
 8000866:	220c      	movs	r2, #12
 8000868:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800086a:	4b0b      	ldr	r3, [pc, #44]	@ (8000898 <MX_USART1_UART_Init+0x58>)
 800086c:	2200      	movs	r2, #0
 800086e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000870:	4b09      	ldr	r3, [pc, #36]	@ (8000898 <MX_USART1_UART_Init+0x58>)
 8000872:	2200      	movs	r2, #0
 8000874:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000876:	4b08      	ldr	r3, [pc, #32]	@ (8000898 <MX_USART1_UART_Init+0x58>)
 8000878:	2200      	movs	r2, #0
 800087a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800087c:	4b06      	ldr	r3, [pc, #24]	@ (8000898 <MX_USART1_UART_Init+0x58>)
 800087e:	2200      	movs	r2, #0
 8000880:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000882:	4805      	ldr	r0, [pc, #20]	@ (8000898 <MX_USART1_UART_Init+0x58>)
 8000884:	f002 f80a 	bl	800289c <HAL_UART_Init>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800088e:	f000 f899 	bl	80009c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	20000030 	.word	0x20000030
 800089c:	40013800 	.word	0x40013800

080008a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b08a      	sub	sp, #40	@ 0x28
 80008a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a6:	f107 0314 	add.w	r3, r7, #20
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	605a      	str	r2, [r3, #4]
 80008b0:	609a      	str	r2, [r3, #8]
 80008b2:	60da      	str	r2, [r3, #12]
 80008b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008b6:	4b40      	ldr	r3, [pc, #256]	@ (80009b8 <MX_GPIO_Init+0x118>)
 80008b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ba:	4a3f      	ldr	r2, [pc, #252]	@ (80009b8 <MX_GPIO_Init+0x118>)
 80008bc:	f043 0304 	orr.w	r3, r3, #4
 80008c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008c2:	4b3d      	ldr	r3, [pc, #244]	@ (80009b8 <MX_GPIO_Init+0x118>)
 80008c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008c6:	f003 0304 	and.w	r3, r3, #4
 80008ca:	613b      	str	r3, [r7, #16]
 80008cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ce:	4b3a      	ldr	r3, [pc, #232]	@ (80009b8 <MX_GPIO_Init+0x118>)
 80008d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008d2:	4a39      	ldr	r2, [pc, #228]	@ (80009b8 <MX_GPIO_Init+0x118>)
 80008d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008da:	4b37      	ldr	r3, [pc, #220]	@ (80009b8 <MX_GPIO_Init+0x118>)
 80008dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e6:	4b34      	ldr	r3, [pc, #208]	@ (80009b8 <MX_GPIO_Init+0x118>)
 80008e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ea:	4a33      	ldr	r2, [pc, #204]	@ (80009b8 <MX_GPIO_Init+0x118>)
 80008ec:	f043 0301 	orr.w	r3, r3, #1
 80008f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008f2:	4b31      	ldr	r3, [pc, #196]	@ (80009b8 <MX_GPIO_Init+0x118>)
 80008f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008f6:	f003 0301 	and.w	r3, r3, #1
 80008fa:	60bb      	str	r3, [r7, #8]
 80008fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008fe:	4b2e      	ldr	r3, [pc, #184]	@ (80009b8 <MX_GPIO_Init+0x118>)
 8000900:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000902:	4a2d      	ldr	r2, [pc, #180]	@ (80009b8 <MX_GPIO_Init+0x118>)
 8000904:	f043 0302 	orr.w	r3, r3, #2
 8000908:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800090a:	4b2b      	ldr	r3, [pc, #172]	@ (80009b8 <MX_GPIO_Init+0x118>)
 800090c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800090e:	f003 0302 	and.w	r3, r3, #2
 8000912:	607b      	str	r3, [r7, #4]
 8000914:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000916:	2200      	movs	r2, #0
 8000918:	2120      	movs	r1, #32
 800091a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800091e:	f000 fc85 	bl	800122c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000922:	2200      	movs	r2, #0
 8000924:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000928:	4824      	ldr	r0, [pc, #144]	@ (80009bc <MX_GPIO_Init+0x11c>)
 800092a:	f000 fc7f 	bl	800122c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800092e:	2200      	movs	r2, #0
 8000930:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000934:	4822      	ldr	r0, [pc, #136]	@ (80009c0 <MX_GPIO_Init+0x120>)
 8000936:	f000 fc79 	bl	800122c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800093a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800093e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000940:	2300      	movs	r3, #0
 8000942:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000948:	f107 0314 	add.w	r3, r7, #20
 800094c:	4619      	mov	r1, r3
 800094e:	481c      	ldr	r0, [pc, #112]	@ (80009c0 <MX_GPIO_Init+0x120>)
 8000950:	f000 faaa 	bl	8000ea8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000954:	2320      	movs	r3, #32
 8000956:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000958:	2301      	movs	r3, #1
 800095a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000960:	2300      	movs	r3, #0
 8000962:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000964:	f107 0314 	add.w	r3, r7, #20
 8000968:	4619      	mov	r1, r3
 800096a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800096e:	f000 fa9b 	bl	8000ea8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000972:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000976:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000978:	2301      	movs	r3, #1
 800097a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000980:	2300      	movs	r3, #0
 8000982:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000984:	f107 0314 	add.w	r3, r7, #20
 8000988:	4619      	mov	r1, r3
 800098a:	480c      	ldr	r0, [pc, #48]	@ (80009bc <MX_GPIO_Init+0x11c>)
 800098c:	f000 fa8c 	bl	8000ea8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000990:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000994:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000996:	2301      	movs	r3, #1
 8000998:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099e:	2300      	movs	r3, #0
 80009a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009a2:	f107 0314 	add.w	r3, r7, #20
 80009a6:	4619      	mov	r1, r3
 80009a8:	4805      	ldr	r0, [pc, #20]	@ (80009c0 <MX_GPIO_Init+0x120>)
 80009aa:	f000 fa7d 	bl	8000ea8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009ae:	bf00      	nop
 80009b0:	3728      	adds	r7, #40	@ 0x28
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	40021000 	.word	0x40021000
 80009bc:	48000400 	.word	0x48000400
 80009c0:	48000800 	.word	0x48000800

080009c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009c8:	b672      	cpsid	i
}
 80009ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009cc:	bf00      	nop
 80009ce:	e7fd      	b.n	80009cc <Error_Handler+0x8>

080009d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000a14 <HAL_MspInit+0x44>)
 80009d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009da:	4a0e      	ldr	r2, [pc, #56]	@ (8000a14 <HAL_MspInit+0x44>)
 80009dc:	f043 0301 	orr.w	r3, r3, #1
 80009e0:	6613      	str	r3, [r2, #96]	@ 0x60
 80009e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000a14 <HAL_MspInit+0x44>)
 80009e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009e6:	f003 0301 	and.w	r3, r3, #1
 80009ea:	607b      	str	r3, [r7, #4]
 80009ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ee:	4b09      	ldr	r3, [pc, #36]	@ (8000a14 <HAL_MspInit+0x44>)
 80009f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009f2:	4a08      	ldr	r2, [pc, #32]	@ (8000a14 <HAL_MspInit+0x44>)
 80009f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80009fa:	4b06      	ldr	r3, [pc, #24]	@ (8000a14 <HAL_MspInit+0x44>)
 80009fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a02:	603b      	str	r3, [r7, #0]
 8000a04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a06:	bf00      	nop
 8000a08:	370c      	adds	r7, #12
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	40021000 	.word	0x40021000

08000a18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b0ac      	sub	sp, #176	@ 0xb0
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a20:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
 8000a28:	605a      	str	r2, [r3, #4]
 8000a2a:	609a      	str	r2, [r3, #8]
 8000a2c:	60da      	str	r2, [r3, #12]
 8000a2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a30:	f107 0314 	add.w	r3, r7, #20
 8000a34:	2288      	movs	r2, #136	@ 0x88
 8000a36:	2100      	movs	r1, #0
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f002 fc50 	bl	80032de <memset>
  if(huart->Instance==USART1)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	4a21      	ldr	r2, [pc, #132]	@ (8000ac8 <HAL_UART_MspInit+0xb0>)
 8000a44:	4293      	cmp	r3, r2
 8000a46:	d13a      	bne.n	8000abe <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a50:	f107 0314 	add.w	r3, r7, #20
 8000a54:	4618      	mov	r0, r3
 8000a56:	f001 fa65 	bl	8001f24 <HAL_RCCEx_PeriphCLKConfig>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a60:	f7ff ffb0 	bl	80009c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a64:	4b19      	ldr	r3, [pc, #100]	@ (8000acc <HAL_UART_MspInit+0xb4>)
 8000a66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a68:	4a18      	ldr	r2, [pc, #96]	@ (8000acc <HAL_UART_MspInit+0xb4>)
 8000a6a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a6e:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a70:	4b16      	ldr	r3, [pc, #88]	@ (8000acc <HAL_UART_MspInit+0xb4>)
 8000a72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a74:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a78:	613b      	str	r3, [r7, #16]
 8000a7a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a7c:	4b13      	ldr	r3, [pc, #76]	@ (8000acc <HAL_UART_MspInit+0xb4>)
 8000a7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a80:	4a12      	ldr	r2, [pc, #72]	@ (8000acc <HAL_UART_MspInit+0xb4>)
 8000a82:	f043 0302 	orr.w	r3, r3, #2
 8000a86:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a88:	4b10      	ldr	r3, [pc, #64]	@ (8000acc <HAL_UART_MspInit+0xb4>)
 8000a8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a8c:	f003 0302 	and.w	r3, r3, #2
 8000a90:	60fb      	str	r3, [r7, #12]
 8000a92:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a94:	23c0      	movs	r3, #192	@ 0xc0
 8000a96:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa6:	2303      	movs	r3, #3
 8000aa8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000aac:	2307      	movs	r3, #7
 8000aae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4805      	ldr	r0, [pc, #20]	@ (8000ad0 <HAL_UART_MspInit+0xb8>)
 8000aba:	f000 f9f5 	bl	8000ea8 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000abe:	bf00      	nop
 8000ac0:	37b0      	adds	r7, #176	@ 0xb0
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	40013800 	.word	0x40013800
 8000acc:	40021000 	.word	0x40021000
 8000ad0:	48000400 	.word	0x48000400

08000ad4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ad8:	bf00      	nop
 8000ada:	e7fd      	b.n	8000ad8 <NMI_Handler+0x4>

08000adc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ae0:	bf00      	nop
 8000ae2:	e7fd      	b.n	8000ae0 <HardFault_Handler+0x4>

08000ae4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ae8:	bf00      	nop
 8000aea:	e7fd      	b.n	8000ae8 <MemManage_Handler+0x4>

08000aec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000af0:	bf00      	nop
 8000af2:	e7fd      	b.n	8000af0 <BusFault_Handler+0x4>

08000af4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000af8:	bf00      	nop
 8000afa:	e7fd      	b.n	8000af8 <UsageFault_Handler+0x4>

08000afc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b00:	bf00      	nop
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr

08000b0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr

08000b18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b1c:	bf00      	nop
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr

08000b26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b26:	b580      	push	{r7, lr}
 8000b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b2a:	f000 f893 	bl	8000c54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b2e:	bf00      	nop
 8000b30:	bd80      	pop	{r7, pc}
	...

08000b34 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b38:	4b06      	ldr	r3, [pc, #24]	@ (8000b54 <SystemInit+0x20>)
 8000b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b3e:	4a05      	ldr	r2, [pc, #20]	@ (8000b54 <SystemInit+0x20>)
 8000b40:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b44:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000b48:	bf00      	nop
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	e000ed00 	.word	0xe000ed00

08000b58 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b58:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b90 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b5c:	f7ff ffea 	bl	8000b34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b60:	480c      	ldr	r0, [pc, #48]	@ (8000b94 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b62:	490d      	ldr	r1, [pc, #52]	@ (8000b98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b64:	4a0d      	ldr	r2, [pc, #52]	@ (8000b9c <LoopForever+0xe>)
  movs r3, #0
 8000b66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b68:	e002      	b.n	8000b70 <LoopCopyDataInit>

08000b6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b6e:	3304      	adds	r3, #4

08000b70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b74:	d3f9      	bcc.n	8000b6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b76:	4a0a      	ldr	r2, [pc, #40]	@ (8000ba0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b78:	4c0a      	ldr	r4, [pc, #40]	@ (8000ba4 <LoopForever+0x16>)
  movs r3, #0
 8000b7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b7c:	e001      	b.n	8000b82 <LoopFillZerobss>

08000b7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b80:	3204      	adds	r2, #4

08000b82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b84:	d3fb      	bcc.n	8000b7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b86:	f002 fbb3 	bl	80032f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b8a:	f7ff fd5f 	bl	800064c <main>

08000b8e <LoopForever>:

LoopForever:
    b LoopForever
 8000b8e:	e7fe      	b.n	8000b8e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b90:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000b94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b98:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000b9c:	080033a8 	.word	0x080033a8
  ldr r2, =_sbss
 8000ba0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000ba4:	200000bc 	.word	0x200000bc

08000ba8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ba8:	e7fe      	b.n	8000ba8 <ADC1_2_IRQHandler>

08000baa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000baa:	b580      	push	{r7, lr}
 8000bac:	b082      	sub	sp, #8
 8000bae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bb4:	2003      	movs	r0, #3
 8000bb6:	f000 f943 	bl	8000e40 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bba:	200f      	movs	r0, #15
 8000bbc:	f000 f80e 	bl	8000bdc <HAL_InitTick>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d002      	beq.n	8000bcc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	71fb      	strb	r3, [r7, #7]
 8000bca:	e001      	b.n	8000bd0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bcc:	f7ff ff00 	bl	80009d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bd0:	79fb      	ldrb	r3, [r7, #7]
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
	...

08000bdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000be4:	2300      	movs	r3, #0
 8000be6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000be8:	4b17      	ldr	r3, [pc, #92]	@ (8000c48 <HAL_InitTick+0x6c>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d023      	beq.n	8000c38 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000bf0:	4b16      	ldr	r3, [pc, #88]	@ (8000c4c <HAL_InitTick+0x70>)
 8000bf2:	681a      	ldr	r2, [r3, #0]
 8000bf4:	4b14      	ldr	r3, [pc, #80]	@ (8000c48 <HAL_InitTick+0x6c>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c02:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c06:	4618      	mov	r0, r3
 8000c08:	f000 f941 	bl	8000e8e <HAL_SYSTICK_Config>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d10f      	bne.n	8000c32 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	2b0f      	cmp	r3, #15
 8000c16:	d809      	bhi.n	8000c2c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c18:	2200      	movs	r2, #0
 8000c1a:	6879      	ldr	r1, [r7, #4]
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	f000 f919 	bl	8000e56 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c24:	4a0a      	ldr	r2, [pc, #40]	@ (8000c50 <HAL_InitTick+0x74>)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	6013      	str	r3, [r2, #0]
 8000c2a:	e007      	b.n	8000c3c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	73fb      	strb	r3, [r7, #15]
 8000c30:	e004      	b.n	8000c3c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c32:	2301      	movs	r3, #1
 8000c34:	73fb      	strb	r3, [r7, #15]
 8000c36:	e001      	b.n	8000c3c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3710      	adds	r7, #16
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	2000000c 	.word	0x2000000c
 8000c4c:	20000004 	.word	0x20000004
 8000c50:	20000008 	.word	0x20000008

08000c54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c58:	4b06      	ldr	r3, [pc, #24]	@ (8000c74 <HAL_IncTick+0x20>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	4b06      	ldr	r3, [pc, #24]	@ (8000c78 <HAL_IncTick+0x24>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4413      	add	r3, r2
 8000c64:	4a04      	ldr	r2, [pc, #16]	@ (8000c78 <HAL_IncTick+0x24>)
 8000c66:	6013      	str	r3, [r2, #0]
}
 8000c68:	bf00      	nop
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	2000000c 	.word	0x2000000c
 8000c78:	200000b8 	.word	0x200000b8

08000c7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c80:	4b03      	ldr	r3, [pc, #12]	@ (8000c90 <HAL_GetTick+0x14>)
 8000c82:	681b      	ldr	r3, [r3, #0]
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	200000b8 	.word	0x200000b8

08000c94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b084      	sub	sp, #16
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c9c:	f7ff ffee 	bl	8000c7c <HAL_GetTick>
 8000ca0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cac:	d005      	beq.n	8000cba <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000cae:	4b0a      	ldr	r3, [pc, #40]	@ (8000cd8 <HAL_Delay+0x44>)
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	461a      	mov	r2, r3
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	4413      	add	r3, r2
 8000cb8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cba:	bf00      	nop
 8000cbc:	f7ff ffde 	bl	8000c7c <HAL_GetTick>
 8000cc0:	4602      	mov	r2, r0
 8000cc2:	68bb      	ldr	r3, [r7, #8]
 8000cc4:	1ad3      	subs	r3, r2, r3
 8000cc6:	68fa      	ldr	r2, [r7, #12]
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	d8f7      	bhi.n	8000cbc <HAL_Delay+0x28>
  {
  }
}
 8000ccc:	bf00      	nop
 8000cce:	bf00      	nop
 8000cd0:	3710      	adds	r7, #16
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	2000000c 	.word	0x2000000c

08000cdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b085      	sub	sp, #20
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	f003 0307 	and.w	r3, r3, #7
 8000cea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cec:	4b0c      	ldr	r3, [pc, #48]	@ (8000d20 <__NVIC_SetPriorityGrouping+0x44>)
 8000cee:	68db      	ldr	r3, [r3, #12]
 8000cf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cf2:	68ba      	ldr	r2, [r7, #8]
 8000cf4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d04:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d0e:	4a04      	ldr	r2, [pc, #16]	@ (8000d20 <__NVIC_SetPriorityGrouping+0x44>)
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	60d3      	str	r3, [r2, #12]
}
 8000d14:	bf00      	nop
 8000d16:	3714      	adds	r7, #20
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d28:	4b04      	ldr	r3, [pc, #16]	@ (8000d3c <__NVIC_GetPriorityGrouping+0x18>)
 8000d2a:	68db      	ldr	r3, [r3, #12]
 8000d2c:	0a1b      	lsrs	r3, r3, #8
 8000d2e:	f003 0307 	and.w	r3, r3, #7
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr
 8000d3c:	e000ed00 	.word	0xe000ed00

08000d40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4603      	mov	r3, r0
 8000d48:	6039      	str	r1, [r7, #0]
 8000d4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	db0a      	blt.n	8000d6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	b2da      	uxtb	r2, r3
 8000d58:	490c      	ldr	r1, [pc, #48]	@ (8000d8c <__NVIC_SetPriority+0x4c>)
 8000d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5e:	0112      	lsls	r2, r2, #4
 8000d60:	b2d2      	uxtb	r2, r2
 8000d62:	440b      	add	r3, r1
 8000d64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d68:	e00a      	b.n	8000d80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	b2da      	uxtb	r2, r3
 8000d6e:	4908      	ldr	r1, [pc, #32]	@ (8000d90 <__NVIC_SetPriority+0x50>)
 8000d70:	79fb      	ldrb	r3, [r7, #7]
 8000d72:	f003 030f 	and.w	r3, r3, #15
 8000d76:	3b04      	subs	r3, #4
 8000d78:	0112      	lsls	r2, r2, #4
 8000d7a:	b2d2      	uxtb	r2, r2
 8000d7c:	440b      	add	r3, r1
 8000d7e:	761a      	strb	r2, [r3, #24]
}
 8000d80:	bf00      	nop
 8000d82:	370c      	adds	r7, #12
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	e000e100 	.word	0xe000e100
 8000d90:	e000ed00 	.word	0xe000ed00

08000d94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b089      	sub	sp, #36	@ 0x24
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	60f8      	str	r0, [r7, #12]
 8000d9c:	60b9      	str	r1, [r7, #8]
 8000d9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	f003 0307 	and.w	r3, r3, #7
 8000da6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000da8:	69fb      	ldr	r3, [r7, #28]
 8000daa:	f1c3 0307 	rsb	r3, r3, #7
 8000dae:	2b04      	cmp	r3, #4
 8000db0:	bf28      	it	cs
 8000db2:	2304      	movcs	r3, #4
 8000db4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	3304      	adds	r3, #4
 8000dba:	2b06      	cmp	r3, #6
 8000dbc:	d902      	bls.n	8000dc4 <NVIC_EncodePriority+0x30>
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	3b03      	subs	r3, #3
 8000dc2:	e000      	b.n	8000dc6 <NVIC_EncodePriority+0x32>
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dcc:	69bb      	ldr	r3, [r7, #24]
 8000dce:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd2:	43da      	mvns	r2, r3
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	401a      	ands	r2, r3
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ddc:	f04f 31ff 	mov.w	r1, #4294967295
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	fa01 f303 	lsl.w	r3, r1, r3
 8000de6:	43d9      	mvns	r1, r3
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dec:	4313      	orrs	r3, r2
         );
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3724      	adds	r7, #36	@ 0x24
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
	...

08000dfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	3b01      	subs	r3, #1
 8000e08:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e0c:	d301      	bcc.n	8000e12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e0e:	2301      	movs	r3, #1
 8000e10:	e00f      	b.n	8000e32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e12:	4a0a      	ldr	r2, [pc, #40]	@ (8000e3c <SysTick_Config+0x40>)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	3b01      	subs	r3, #1
 8000e18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e1a:	210f      	movs	r1, #15
 8000e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e20:	f7ff ff8e 	bl	8000d40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e24:	4b05      	ldr	r3, [pc, #20]	@ (8000e3c <SysTick_Config+0x40>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e2a:	4b04      	ldr	r3, [pc, #16]	@ (8000e3c <SysTick_Config+0x40>)
 8000e2c:	2207      	movs	r2, #7
 8000e2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e30:	2300      	movs	r3, #0
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	e000e010 	.word	0xe000e010

08000e40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e48:	6878      	ldr	r0, [r7, #4]
 8000e4a:	f7ff ff47 	bl	8000cdc <__NVIC_SetPriorityGrouping>
}
 8000e4e:	bf00      	nop
 8000e50:	3708      	adds	r7, #8
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}

08000e56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e56:	b580      	push	{r7, lr}
 8000e58:	b086      	sub	sp, #24
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	60b9      	str	r1, [r7, #8]
 8000e60:	607a      	str	r2, [r7, #4]
 8000e62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e64:	2300      	movs	r3, #0
 8000e66:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e68:	f7ff ff5c 	bl	8000d24 <__NVIC_GetPriorityGrouping>
 8000e6c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e6e:	687a      	ldr	r2, [r7, #4]
 8000e70:	68b9      	ldr	r1, [r7, #8]
 8000e72:	6978      	ldr	r0, [r7, #20]
 8000e74:	f7ff ff8e 	bl	8000d94 <NVIC_EncodePriority>
 8000e78:	4602      	mov	r2, r0
 8000e7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e7e:	4611      	mov	r1, r2
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff ff5d 	bl	8000d40 <__NVIC_SetPriority>
}
 8000e86:	bf00      	nop
 8000e88:	3718      	adds	r7, #24
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}

08000e8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e8e:	b580      	push	{r7, lr}
 8000e90:	b082      	sub	sp, #8
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e96:	6878      	ldr	r0, [r7, #4]
 8000e98:	f7ff ffb0 	bl	8000dfc <SysTick_Config>
 8000e9c:	4603      	mov	r3, r0
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
	...

08000ea8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b087      	sub	sp, #28
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eb6:	e17f      	b.n	80011b8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	2101      	movs	r1, #1
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	f000 8171 	beq.w	80011b2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f003 0303 	and.w	r3, r3, #3
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d005      	beq.n	8000ee8 <HAL_GPIO_Init+0x40>
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	f003 0303 	and.w	r3, r3, #3
 8000ee4:	2b02      	cmp	r3, #2
 8000ee6:	d130      	bne.n	8000f4a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	689b      	ldr	r3, [r3, #8]
 8000eec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	2203      	movs	r2, #3
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	43db      	mvns	r3, r3
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	4013      	ands	r3, r2
 8000efe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	68da      	ldr	r2, [r3, #12]
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	693a      	ldr	r2, [r7, #16]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	693a      	ldr	r2, [r7, #16]
 8000f16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f1e:	2201      	movs	r2, #1
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	fa02 f303 	lsl.w	r3, r2, r3
 8000f26:	43db      	mvns	r3, r3
 8000f28:	693a      	ldr	r2, [r7, #16]
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	091b      	lsrs	r3, r3, #4
 8000f34:	f003 0201 	and.w	r2, r3, #1
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f003 0303 	and.w	r3, r3, #3
 8000f52:	2b03      	cmp	r3, #3
 8000f54:	d118      	bne.n	8000f88 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f5a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	43db      	mvns	r3, r3
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	08db      	lsrs	r3, r3, #3
 8000f72:	f003 0201 	and.w	r2, r3, #1
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	693a      	ldr	r2, [r7, #16]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	693a      	ldr	r2, [r7, #16]
 8000f86:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f003 0303 	and.w	r3, r3, #3
 8000f90:	2b03      	cmp	r3, #3
 8000f92:	d017      	beq.n	8000fc4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	2203      	movs	r2, #3
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	43db      	mvns	r3, r3
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	689a      	ldr	r2, [r3, #8]
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	693a      	ldr	r2, [r7, #16]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	693a      	ldr	r2, [r7, #16]
 8000fc2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f003 0303 	and.w	r3, r3, #3
 8000fcc:	2b02      	cmp	r3, #2
 8000fce:	d123      	bne.n	8001018 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	08da      	lsrs	r2, r3, #3
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	3208      	adds	r2, #8
 8000fd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fdc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	f003 0307 	and.w	r3, r3, #7
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	220f      	movs	r2, #15
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	43db      	mvns	r3, r3
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	691a      	ldr	r2, [r3, #16]
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	f003 0307 	and.w	r3, r3, #7
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	693a      	ldr	r2, [r7, #16]
 8001006:	4313      	orrs	r3, r2
 8001008:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	08da      	lsrs	r2, r3, #3
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	3208      	adds	r2, #8
 8001012:	6939      	ldr	r1, [r7, #16]
 8001014:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	2203      	movs	r2, #3
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	43db      	mvns	r3, r3
 800102a:	693a      	ldr	r2, [r7, #16]
 800102c:	4013      	ands	r3, r2
 800102e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f003 0203 	and.w	r2, r3, #3
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	693a      	ldr	r2, [r7, #16]
 8001042:	4313      	orrs	r3, r2
 8001044:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	693a      	ldr	r2, [r7, #16]
 800104a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001054:	2b00      	cmp	r3, #0
 8001056:	f000 80ac 	beq.w	80011b2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800105a:	4b5f      	ldr	r3, [pc, #380]	@ (80011d8 <HAL_GPIO_Init+0x330>)
 800105c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800105e:	4a5e      	ldr	r2, [pc, #376]	@ (80011d8 <HAL_GPIO_Init+0x330>)
 8001060:	f043 0301 	orr.w	r3, r3, #1
 8001064:	6613      	str	r3, [r2, #96]	@ 0x60
 8001066:	4b5c      	ldr	r3, [pc, #368]	@ (80011d8 <HAL_GPIO_Init+0x330>)
 8001068:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800106a:	f003 0301 	and.w	r3, r3, #1
 800106e:	60bb      	str	r3, [r7, #8]
 8001070:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001072:	4a5a      	ldr	r2, [pc, #360]	@ (80011dc <HAL_GPIO_Init+0x334>)
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	089b      	lsrs	r3, r3, #2
 8001078:	3302      	adds	r3, #2
 800107a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800107e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	f003 0303 	and.w	r3, r3, #3
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	220f      	movs	r2, #15
 800108a:	fa02 f303 	lsl.w	r3, r2, r3
 800108e:	43db      	mvns	r3, r3
 8001090:	693a      	ldr	r2, [r7, #16]
 8001092:	4013      	ands	r3, r2
 8001094:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800109c:	d025      	beq.n	80010ea <HAL_GPIO_Init+0x242>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a4f      	ldr	r2, [pc, #316]	@ (80011e0 <HAL_GPIO_Init+0x338>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d01f      	beq.n	80010e6 <HAL_GPIO_Init+0x23e>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a4e      	ldr	r2, [pc, #312]	@ (80011e4 <HAL_GPIO_Init+0x33c>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d019      	beq.n	80010e2 <HAL_GPIO_Init+0x23a>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a4d      	ldr	r2, [pc, #308]	@ (80011e8 <HAL_GPIO_Init+0x340>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d013      	beq.n	80010de <HAL_GPIO_Init+0x236>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a4c      	ldr	r2, [pc, #304]	@ (80011ec <HAL_GPIO_Init+0x344>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d00d      	beq.n	80010da <HAL_GPIO_Init+0x232>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a4b      	ldr	r2, [pc, #300]	@ (80011f0 <HAL_GPIO_Init+0x348>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d007      	beq.n	80010d6 <HAL_GPIO_Init+0x22e>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a4a      	ldr	r2, [pc, #296]	@ (80011f4 <HAL_GPIO_Init+0x34c>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d101      	bne.n	80010d2 <HAL_GPIO_Init+0x22a>
 80010ce:	2306      	movs	r3, #6
 80010d0:	e00c      	b.n	80010ec <HAL_GPIO_Init+0x244>
 80010d2:	2307      	movs	r3, #7
 80010d4:	e00a      	b.n	80010ec <HAL_GPIO_Init+0x244>
 80010d6:	2305      	movs	r3, #5
 80010d8:	e008      	b.n	80010ec <HAL_GPIO_Init+0x244>
 80010da:	2304      	movs	r3, #4
 80010dc:	e006      	b.n	80010ec <HAL_GPIO_Init+0x244>
 80010de:	2303      	movs	r3, #3
 80010e0:	e004      	b.n	80010ec <HAL_GPIO_Init+0x244>
 80010e2:	2302      	movs	r3, #2
 80010e4:	e002      	b.n	80010ec <HAL_GPIO_Init+0x244>
 80010e6:	2301      	movs	r3, #1
 80010e8:	e000      	b.n	80010ec <HAL_GPIO_Init+0x244>
 80010ea:	2300      	movs	r3, #0
 80010ec:	697a      	ldr	r2, [r7, #20]
 80010ee:	f002 0203 	and.w	r2, r2, #3
 80010f2:	0092      	lsls	r2, r2, #2
 80010f4:	4093      	lsls	r3, r2
 80010f6:	693a      	ldr	r2, [r7, #16]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010fc:	4937      	ldr	r1, [pc, #220]	@ (80011dc <HAL_GPIO_Init+0x334>)
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	089b      	lsrs	r3, r3, #2
 8001102:	3302      	adds	r3, #2
 8001104:	693a      	ldr	r2, [r7, #16]
 8001106:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800110a:	4b3b      	ldr	r3, [pc, #236]	@ (80011f8 <HAL_GPIO_Init+0x350>)
 800110c:	689b      	ldr	r3, [r3, #8]
 800110e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	43db      	mvns	r3, r3
 8001114:	693a      	ldr	r2, [r7, #16]
 8001116:	4013      	ands	r3, r2
 8001118:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001122:	2b00      	cmp	r3, #0
 8001124:	d003      	beq.n	800112e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	4313      	orrs	r3, r2
 800112c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800112e:	4a32      	ldr	r2, [pc, #200]	@ (80011f8 <HAL_GPIO_Init+0x350>)
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001134:	4b30      	ldr	r3, [pc, #192]	@ (80011f8 <HAL_GPIO_Init+0x350>)
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	43db      	mvns	r3, r3
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	4013      	ands	r3, r2
 8001142:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800114c:	2b00      	cmp	r3, #0
 800114e:	d003      	beq.n	8001158 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001150:	693a      	ldr	r2, [r7, #16]
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	4313      	orrs	r3, r2
 8001156:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001158:	4a27      	ldr	r2, [pc, #156]	@ (80011f8 <HAL_GPIO_Init+0x350>)
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800115e:	4b26      	ldr	r3, [pc, #152]	@ (80011f8 <HAL_GPIO_Init+0x350>)
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	43db      	mvns	r3, r3
 8001168:	693a      	ldr	r2, [r7, #16]
 800116a:	4013      	ands	r3, r2
 800116c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001176:	2b00      	cmp	r3, #0
 8001178:	d003      	beq.n	8001182 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	4313      	orrs	r3, r2
 8001180:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001182:	4a1d      	ldr	r2, [pc, #116]	@ (80011f8 <HAL_GPIO_Init+0x350>)
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001188:	4b1b      	ldr	r3, [pc, #108]	@ (80011f8 <HAL_GPIO_Init+0x350>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	43db      	mvns	r3, r3
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	4013      	ands	r3, r2
 8001196:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d003      	beq.n	80011ac <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80011a4:	693a      	ldr	r2, [r7, #16]
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011ac:	4a12      	ldr	r2, [pc, #72]	@ (80011f8 <HAL_GPIO_Init+0x350>)
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	3301      	adds	r3, #1
 80011b6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	fa22 f303 	lsr.w	r3, r2, r3
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	f47f ae78 	bne.w	8000eb8 <HAL_GPIO_Init+0x10>
  }
}
 80011c8:	bf00      	nop
 80011ca:	bf00      	nop
 80011cc:	371c      	adds	r7, #28
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	40021000 	.word	0x40021000
 80011dc:	40010000 	.word	0x40010000
 80011e0:	48000400 	.word	0x48000400
 80011e4:	48000800 	.word	0x48000800
 80011e8:	48000c00 	.word	0x48000c00
 80011ec:	48001000 	.word	0x48001000
 80011f0:	48001400 	.word	0x48001400
 80011f4:	48001800 	.word	0x48001800
 80011f8:	40010400 	.word	0x40010400

080011fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b085      	sub	sp, #20
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	460b      	mov	r3, r1
 8001206:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	691a      	ldr	r2, [r3, #16]
 800120c:	887b      	ldrh	r3, [r7, #2]
 800120e:	4013      	ands	r3, r2
 8001210:	2b00      	cmp	r3, #0
 8001212:	d002      	beq.n	800121a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001214:	2301      	movs	r3, #1
 8001216:	73fb      	strb	r3, [r7, #15]
 8001218:	e001      	b.n	800121e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800121a:	2300      	movs	r3, #0
 800121c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800121e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001220:	4618      	mov	r0, r3
 8001222:	3714      	adds	r7, #20
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr

0800122c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	460b      	mov	r3, r1
 8001236:	807b      	strh	r3, [r7, #2]
 8001238:	4613      	mov	r3, r2
 800123a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800123c:	787b      	ldrb	r3, [r7, #1]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d003      	beq.n	800124a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001242:	887a      	ldrh	r2, [r7, #2]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001248:	e002      	b.n	8001250 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800124a:	887a      	ldrh	r2, [r7, #2]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001250:	bf00      	nop
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr

0800125c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001260:	4b04      	ldr	r3, [pc, #16]	@ (8001274 <HAL_PWREx_GetVoltageRange+0x18>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001268:	4618      	mov	r0, r3
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	40007000 	.word	0x40007000

08001278 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001278:	b480      	push	{r7}
 800127a:	b085      	sub	sp, #20
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001286:	d130      	bne.n	80012ea <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001288:	4b23      	ldr	r3, [pc, #140]	@ (8001318 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001290:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001294:	d038      	beq.n	8001308 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001296:	4b20      	ldr	r3, [pc, #128]	@ (8001318 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800129e:	4a1e      	ldr	r2, [pc, #120]	@ (8001318 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012a0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012a4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80012a6:	4b1d      	ldr	r3, [pc, #116]	@ (800131c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	2232      	movs	r2, #50	@ 0x32
 80012ac:	fb02 f303 	mul.w	r3, r2, r3
 80012b0:	4a1b      	ldr	r2, [pc, #108]	@ (8001320 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80012b2:	fba2 2303 	umull	r2, r3, r2, r3
 80012b6:	0c9b      	lsrs	r3, r3, #18
 80012b8:	3301      	adds	r3, #1
 80012ba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012bc:	e002      	b.n	80012c4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	3b01      	subs	r3, #1
 80012c2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012c4:	4b14      	ldr	r3, [pc, #80]	@ (8001318 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012c6:	695b      	ldr	r3, [r3, #20]
 80012c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012d0:	d102      	bne.n	80012d8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d1f2      	bne.n	80012be <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001318 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012da:	695b      	ldr	r3, [r3, #20]
 80012dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012e4:	d110      	bne.n	8001308 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80012e6:	2303      	movs	r3, #3
 80012e8:	e00f      	b.n	800130a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80012ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001318 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80012f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012f6:	d007      	beq.n	8001308 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80012f8:	4b07      	ldr	r3, [pc, #28]	@ (8001318 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001300:	4a05      	ldr	r2, [pc, #20]	@ (8001318 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001302:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001306:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001308:	2300      	movs	r3, #0
}
 800130a:	4618      	mov	r0, r3
 800130c:	3714      	adds	r7, #20
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	40007000 	.word	0x40007000
 800131c:	20000004 	.word	0x20000004
 8001320:	431bde83 	.word	0x431bde83

08001324 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b088      	sub	sp, #32
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d101      	bne.n	8001336 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	e3ca      	b.n	8001acc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001336:	4b97      	ldr	r3, [pc, #604]	@ (8001594 <HAL_RCC_OscConfig+0x270>)
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	f003 030c 	and.w	r3, r3, #12
 800133e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001340:	4b94      	ldr	r3, [pc, #592]	@ (8001594 <HAL_RCC_OscConfig+0x270>)
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	f003 0303 	and.w	r3, r3, #3
 8001348:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f003 0310 	and.w	r3, r3, #16
 8001352:	2b00      	cmp	r3, #0
 8001354:	f000 80e4 	beq.w	8001520 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d007      	beq.n	800136e <HAL_RCC_OscConfig+0x4a>
 800135e:	69bb      	ldr	r3, [r7, #24]
 8001360:	2b0c      	cmp	r3, #12
 8001362:	f040 808b 	bne.w	800147c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	2b01      	cmp	r3, #1
 800136a:	f040 8087 	bne.w	800147c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800136e:	4b89      	ldr	r3, [pc, #548]	@ (8001594 <HAL_RCC_OscConfig+0x270>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f003 0302 	and.w	r3, r3, #2
 8001376:	2b00      	cmp	r3, #0
 8001378:	d005      	beq.n	8001386 <HAL_RCC_OscConfig+0x62>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	699b      	ldr	r3, [r3, #24]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d101      	bne.n	8001386 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	e3a2      	b.n	8001acc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6a1a      	ldr	r2, [r3, #32]
 800138a:	4b82      	ldr	r3, [pc, #520]	@ (8001594 <HAL_RCC_OscConfig+0x270>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f003 0308 	and.w	r3, r3, #8
 8001392:	2b00      	cmp	r3, #0
 8001394:	d004      	beq.n	80013a0 <HAL_RCC_OscConfig+0x7c>
 8001396:	4b7f      	ldr	r3, [pc, #508]	@ (8001594 <HAL_RCC_OscConfig+0x270>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800139e:	e005      	b.n	80013ac <HAL_RCC_OscConfig+0x88>
 80013a0:	4b7c      	ldr	r3, [pc, #496]	@ (8001594 <HAL_RCC_OscConfig+0x270>)
 80013a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80013a6:	091b      	lsrs	r3, r3, #4
 80013a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d223      	bcs.n	80013f8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6a1b      	ldr	r3, [r3, #32]
 80013b4:	4618      	mov	r0, r3
 80013b6:	f000 fd55 	bl	8001e64 <RCC_SetFlashLatencyFromMSIRange>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80013c0:	2301      	movs	r3, #1
 80013c2:	e383      	b.n	8001acc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013c4:	4b73      	ldr	r3, [pc, #460]	@ (8001594 <HAL_RCC_OscConfig+0x270>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a72      	ldr	r2, [pc, #456]	@ (8001594 <HAL_RCC_OscConfig+0x270>)
 80013ca:	f043 0308 	orr.w	r3, r3, #8
 80013ce:	6013      	str	r3, [r2, #0]
 80013d0:	4b70      	ldr	r3, [pc, #448]	@ (8001594 <HAL_RCC_OscConfig+0x270>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6a1b      	ldr	r3, [r3, #32]
 80013dc:	496d      	ldr	r1, [pc, #436]	@ (8001594 <HAL_RCC_OscConfig+0x270>)
 80013de:	4313      	orrs	r3, r2
 80013e0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013e2:	4b6c      	ldr	r3, [pc, #432]	@ (8001594 <HAL_RCC_OscConfig+0x270>)
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	69db      	ldr	r3, [r3, #28]
 80013ee:	021b      	lsls	r3, r3, #8
 80013f0:	4968      	ldr	r1, [pc, #416]	@ (8001594 <HAL_RCC_OscConfig+0x270>)
 80013f2:	4313      	orrs	r3, r2
 80013f4:	604b      	str	r3, [r1, #4]
 80013f6:	e025      	b.n	8001444 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013f8:	4b66      	ldr	r3, [pc, #408]	@ (8001594 <HAL_RCC_OscConfig+0x270>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a65      	ldr	r2, [pc, #404]	@ (8001594 <HAL_RCC_OscConfig+0x270>)
 80013fe:	f043 0308 	orr.w	r3, r3, #8
 8001402:	6013      	str	r3, [r2, #0]
 8001404:	4b63      	ldr	r3, [pc, #396]	@ (8001594 <HAL_RCC_OscConfig+0x270>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6a1b      	ldr	r3, [r3, #32]
 8001410:	4960      	ldr	r1, [pc, #384]	@ (8001594 <HAL_RCC_OscConfig+0x270>)
 8001412:	4313      	orrs	r3, r2
 8001414:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001416:	4b5f      	ldr	r3, [pc, #380]	@ (8001594 <HAL_RCC_OscConfig+0x270>)
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	69db      	ldr	r3, [r3, #28]
 8001422:	021b      	lsls	r3, r3, #8
 8001424:	495b      	ldr	r1, [pc, #364]	@ (8001594 <HAL_RCC_OscConfig+0x270>)
 8001426:	4313      	orrs	r3, r2
 8001428:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d109      	bne.n	8001444 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6a1b      	ldr	r3, [r3, #32]
 8001434:	4618      	mov	r0, r3
 8001436:	f000 fd15 	bl	8001e64 <RCC_SetFlashLatencyFromMSIRange>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001440:	2301      	movs	r3, #1
 8001442:	e343      	b.n	8001acc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001444:	f000 fc4a 	bl	8001cdc <HAL_RCC_GetSysClockFreq>
 8001448:	4602      	mov	r2, r0
 800144a:	4b52      	ldr	r3, [pc, #328]	@ (8001594 <HAL_RCC_OscConfig+0x270>)
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	091b      	lsrs	r3, r3, #4
 8001450:	f003 030f 	and.w	r3, r3, #15
 8001454:	4950      	ldr	r1, [pc, #320]	@ (8001598 <HAL_RCC_OscConfig+0x274>)
 8001456:	5ccb      	ldrb	r3, [r1, r3]
 8001458:	f003 031f 	and.w	r3, r3, #31
 800145c:	fa22 f303 	lsr.w	r3, r2, r3
 8001460:	4a4e      	ldr	r2, [pc, #312]	@ (800159c <HAL_RCC_OscConfig+0x278>)
 8001462:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001464:	4b4e      	ldr	r3, [pc, #312]	@ (80015a0 <HAL_RCC_OscConfig+0x27c>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff fbb7 	bl	8000bdc <HAL_InitTick>
 800146e:	4603      	mov	r3, r0
 8001470:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001472:	7bfb      	ldrb	r3, [r7, #15]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d052      	beq.n	800151e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001478:	7bfb      	ldrb	r3, [r7, #15]
 800147a:	e327      	b.n	8001acc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	699b      	ldr	r3, [r3, #24]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d032      	beq.n	80014ea <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001484:	4b43      	ldr	r3, [pc, #268]	@ (8001594 <HAL_RCC_OscConfig+0x270>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a42      	ldr	r2, [pc, #264]	@ (8001594 <HAL_RCC_OscConfig+0x270>)
 800148a:	f043 0301 	orr.w	r3, r3, #1
 800148e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001490:	f7ff fbf4 	bl	8000c7c <HAL_GetTick>
 8001494:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001496:	e008      	b.n	80014aa <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001498:	f7ff fbf0 	bl	8000c7c <HAL_GetTick>
 800149c:	4602      	mov	r2, r0
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d901      	bls.n	80014aa <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80014a6:	2303      	movs	r3, #3
 80014a8:	e310      	b.n	8001acc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014aa:	4b3a      	ldr	r3, [pc, #232]	@ (8001594 <HAL_RCC_OscConfig+0x270>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f003 0302 	and.w	r3, r3, #2
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d0f0      	beq.n	8001498 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014b6:	4b37      	ldr	r3, [pc, #220]	@ (8001594 <HAL_RCC_OscConfig+0x270>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a36      	ldr	r2, [pc, #216]	@ (8001594 <HAL_RCC_OscConfig+0x270>)
 80014bc:	f043 0308 	orr.w	r3, r3, #8
 80014c0:	6013      	str	r3, [r2, #0]
 80014c2:	4b34      	ldr	r3, [pc, #208]	@ (8001594 <HAL_RCC_OscConfig+0x270>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6a1b      	ldr	r3, [r3, #32]
 80014ce:	4931      	ldr	r1, [pc, #196]	@ (8001594 <HAL_RCC_OscConfig+0x270>)
 80014d0:	4313      	orrs	r3, r2
 80014d2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014d4:	4b2f      	ldr	r3, [pc, #188]	@ (8001594 <HAL_RCC_OscConfig+0x270>)
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	69db      	ldr	r3, [r3, #28]
 80014e0:	021b      	lsls	r3, r3, #8
 80014e2:	492c      	ldr	r1, [pc, #176]	@ (8001594 <HAL_RCC_OscConfig+0x270>)
 80014e4:	4313      	orrs	r3, r2
 80014e6:	604b      	str	r3, [r1, #4]
 80014e8:	e01a      	b.n	8001520 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80014ea:	4b2a      	ldr	r3, [pc, #168]	@ (8001594 <HAL_RCC_OscConfig+0x270>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a29      	ldr	r2, [pc, #164]	@ (8001594 <HAL_RCC_OscConfig+0x270>)
 80014f0:	f023 0301 	bic.w	r3, r3, #1
 80014f4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80014f6:	f7ff fbc1 	bl	8000c7c <HAL_GetTick>
 80014fa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80014fc:	e008      	b.n	8001510 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014fe:	f7ff fbbd 	bl	8000c7c <HAL_GetTick>
 8001502:	4602      	mov	r2, r0
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	2b02      	cmp	r3, #2
 800150a:	d901      	bls.n	8001510 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800150c:	2303      	movs	r3, #3
 800150e:	e2dd      	b.n	8001acc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001510:	4b20      	ldr	r3, [pc, #128]	@ (8001594 <HAL_RCC_OscConfig+0x270>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 0302 	and.w	r3, r3, #2
 8001518:	2b00      	cmp	r3, #0
 800151a:	d1f0      	bne.n	80014fe <HAL_RCC_OscConfig+0x1da>
 800151c:	e000      	b.n	8001520 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800151e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f003 0301 	and.w	r3, r3, #1
 8001528:	2b00      	cmp	r3, #0
 800152a:	d074      	beq.n	8001616 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800152c:	69bb      	ldr	r3, [r7, #24]
 800152e:	2b08      	cmp	r3, #8
 8001530:	d005      	beq.n	800153e <HAL_RCC_OscConfig+0x21a>
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	2b0c      	cmp	r3, #12
 8001536:	d10e      	bne.n	8001556 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	2b03      	cmp	r3, #3
 800153c:	d10b      	bne.n	8001556 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800153e:	4b15      	ldr	r3, [pc, #84]	@ (8001594 <HAL_RCC_OscConfig+0x270>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d064      	beq.n	8001614 <HAL_RCC_OscConfig+0x2f0>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d160      	bne.n	8001614 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e2ba      	b.n	8001acc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800155e:	d106      	bne.n	800156e <HAL_RCC_OscConfig+0x24a>
 8001560:	4b0c      	ldr	r3, [pc, #48]	@ (8001594 <HAL_RCC_OscConfig+0x270>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a0b      	ldr	r2, [pc, #44]	@ (8001594 <HAL_RCC_OscConfig+0x270>)
 8001566:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800156a:	6013      	str	r3, [r2, #0]
 800156c:	e026      	b.n	80015bc <HAL_RCC_OscConfig+0x298>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001576:	d115      	bne.n	80015a4 <HAL_RCC_OscConfig+0x280>
 8001578:	4b06      	ldr	r3, [pc, #24]	@ (8001594 <HAL_RCC_OscConfig+0x270>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a05      	ldr	r2, [pc, #20]	@ (8001594 <HAL_RCC_OscConfig+0x270>)
 800157e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001582:	6013      	str	r3, [r2, #0]
 8001584:	4b03      	ldr	r3, [pc, #12]	@ (8001594 <HAL_RCC_OscConfig+0x270>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a02      	ldr	r2, [pc, #8]	@ (8001594 <HAL_RCC_OscConfig+0x270>)
 800158a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800158e:	6013      	str	r3, [r2, #0]
 8001590:	e014      	b.n	80015bc <HAL_RCC_OscConfig+0x298>
 8001592:	bf00      	nop
 8001594:	40021000 	.word	0x40021000
 8001598:	08003350 	.word	0x08003350
 800159c:	20000004 	.word	0x20000004
 80015a0:	20000008 	.word	0x20000008
 80015a4:	4ba0      	ldr	r3, [pc, #640]	@ (8001828 <HAL_RCC_OscConfig+0x504>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a9f      	ldr	r2, [pc, #636]	@ (8001828 <HAL_RCC_OscConfig+0x504>)
 80015aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015ae:	6013      	str	r3, [r2, #0]
 80015b0:	4b9d      	ldr	r3, [pc, #628]	@ (8001828 <HAL_RCC_OscConfig+0x504>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a9c      	ldr	r2, [pc, #624]	@ (8001828 <HAL_RCC_OscConfig+0x504>)
 80015b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d013      	beq.n	80015ec <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015c4:	f7ff fb5a 	bl	8000c7c <HAL_GetTick>
 80015c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015ca:	e008      	b.n	80015de <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015cc:	f7ff fb56 	bl	8000c7c <HAL_GetTick>
 80015d0:	4602      	mov	r2, r0
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	2b64      	cmp	r3, #100	@ 0x64
 80015d8:	d901      	bls.n	80015de <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80015da:	2303      	movs	r3, #3
 80015dc:	e276      	b.n	8001acc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015de:	4b92      	ldr	r3, [pc, #584]	@ (8001828 <HAL_RCC_OscConfig+0x504>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d0f0      	beq.n	80015cc <HAL_RCC_OscConfig+0x2a8>
 80015ea:	e014      	b.n	8001616 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ec:	f7ff fb46 	bl	8000c7c <HAL_GetTick>
 80015f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015f2:	e008      	b.n	8001606 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015f4:	f7ff fb42 	bl	8000c7c <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	2b64      	cmp	r3, #100	@ 0x64
 8001600:	d901      	bls.n	8001606 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e262      	b.n	8001acc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001606:	4b88      	ldr	r3, [pc, #544]	@ (8001828 <HAL_RCC_OscConfig+0x504>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d1f0      	bne.n	80015f4 <HAL_RCC_OscConfig+0x2d0>
 8001612:	e000      	b.n	8001616 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001614:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 0302 	and.w	r3, r3, #2
 800161e:	2b00      	cmp	r3, #0
 8001620:	d060      	beq.n	80016e4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	2b04      	cmp	r3, #4
 8001626:	d005      	beq.n	8001634 <HAL_RCC_OscConfig+0x310>
 8001628:	69bb      	ldr	r3, [r7, #24]
 800162a:	2b0c      	cmp	r3, #12
 800162c:	d119      	bne.n	8001662 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	2b02      	cmp	r3, #2
 8001632:	d116      	bne.n	8001662 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001634:	4b7c      	ldr	r3, [pc, #496]	@ (8001828 <HAL_RCC_OscConfig+0x504>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800163c:	2b00      	cmp	r3, #0
 800163e:	d005      	beq.n	800164c <HAL_RCC_OscConfig+0x328>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d101      	bne.n	800164c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e23f      	b.n	8001acc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800164c:	4b76      	ldr	r3, [pc, #472]	@ (8001828 <HAL_RCC_OscConfig+0x504>)
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	691b      	ldr	r3, [r3, #16]
 8001658:	061b      	lsls	r3, r3, #24
 800165a:	4973      	ldr	r1, [pc, #460]	@ (8001828 <HAL_RCC_OscConfig+0x504>)
 800165c:	4313      	orrs	r3, r2
 800165e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001660:	e040      	b.n	80016e4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	68db      	ldr	r3, [r3, #12]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d023      	beq.n	80016b2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800166a:	4b6f      	ldr	r3, [pc, #444]	@ (8001828 <HAL_RCC_OscConfig+0x504>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a6e      	ldr	r2, [pc, #440]	@ (8001828 <HAL_RCC_OscConfig+0x504>)
 8001670:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001674:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001676:	f7ff fb01 	bl	8000c7c <HAL_GetTick>
 800167a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800167c:	e008      	b.n	8001690 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800167e:	f7ff fafd 	bl	8000c7c <HAL_GetTick>
 8001682:	4602      	mov	r2, r0
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	2b02      	cmp	r3, #2
 800168a:	d901      	bls.n	8001690 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800168c:	2303      	movs	r3, #3
 800168e:	e21d      	b.n	8001acc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001690:	4b65      	ldr	r3, [pc, #404]	@ (8001828 <HAL_RCC_OscConfig+0x504>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001698:	2b00      	cmp	r3, #0
 800169a:	d0f0      	beq.n	800167e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800169c:	4b62      	ldr	r3, [pc, #392]	@ (8001828 <HAL_RCC_OscConfig+0x504>)
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	691b      	ldr	r3, [r3, #16]
 80016a8:	061b      	lsls	r3, r3, #24
 80016aa:	495f      	ldr	r1, [pc, #380]	@ (8001828 <HAL_RCC_OscConfig+0x504>)
 80016ac:	4313      	orrs	r3, r2
 80016ae:	604b      	str	r3, [r1, #4]
 80016b0:	e018      	b.n	80016e4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016b2:	4b5d      	ldr	r3, [pc, #372]	@ (8001828 <HAL_RCC_OscConfig+0x504>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a5c      	ldr	r2, [pc, #368]	@ (8001828 <HAL_RCC_OscConfig+0x504>)
 80016b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80016bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016be:	f7ff fadd 	bl	8000c7c <HAL_GetTick>
 80016c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016c4:	e008      	b.n	80016d8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016c6:	f7ff fad9 	bl	8000c7c <HAL_GetTick>
 80016ca:	4602      	mov	r2, r0
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	d901      	bls.n	80016d8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80016d4:	2303      	movs	r3, #3
 80016d6:	e1f9      	b.n	8001acc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016d8:	4b53      	ldr	r3, [pc, #332]	@ (8001828 <HAL_RCC_OscConfig+0x504>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d1f0      	bne.n	80016c6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 0308 	and.w	r3, r3, #8
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d03c      	beq.n	800176a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	695b      	ldr	r3, [r3, #20]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d01c      	beq.n	8001732 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016f8:	4b4b      	ldr	r3, [pc, #300]	@ (8001828 <HAL_RCC_OscConfig+0x504>)
 80016fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016fe:	4a4a      	ldr	r2, [pc, #296]	@ (8001828 <HAL_RCC_OscConfig+0x504>)
 8001700:	f043 0301 	orr.w	r3, r3, #1
 8001704:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001708:	f7ff fab8 	bl	8000c7c <HAL_GetTick>
 800170c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800170e:	e008      	b.n	8001722 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001710:	f7ff fab4 	bl	8000c7c <HAL_GetTick>
 8001714:	4602      	mov	r2, r0
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	2b02      	cmp	r3, #2
 800171c:	d901      	bls.n	8001722 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800171e:	2303      	movs	r3, #3
 8001720:	e1d4      	b.n	8001acc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001722:	4b41      	ldr	r3, [pc, #260]	@ (8001828 <HAL_RCC_OscConfig+0x504>)
 8001724:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001728:	f003 0302 	and.w	r3, r3, #2
 800172c:	2b00      	cmp	r3, #0
 800172e:	d0ef      	beq.n	8001710 <HAL_RCC_OscConfig+0x3ec>
 8001730:	e01b      	b.n	800176a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001732:	4b3d      	ldr	r3, [pc, #244]	@ (8001828 <HAL_RCC_OscConfig+0x504>)
 8001734:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001738:	4a3b      	ldr	r2, [pc, #236]	@ (8001828 <HAL_RCC_OscConfig+0x504>)
 800173a:	f023 0301 	bic.w	r3, r3, #1
 800173e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001742:	f7ff fa9b 	bl	8000c7c <HAL_GetTick>
 8001746:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001748:	e008      	b.n	800175c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800174a:	f7ff fa97 	bl	8000c7c <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	2b02      	cmp	r3, #2
 8001756:	d901      	bls.n	800175c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e1b7      	b.n	8001acc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800175c:	4b32      	ldr	r3, [pc, #200]	@ (8001828 <HAL_RCC_OscConfig+0x504>)
 800175e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001762:	f003 0302 	and.w	r3, r3, #2
 8001766:	2b00      	cmp	r3, #0
 8001768:	d1ef      	bne.n	800174a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0304 	and.w	r3, r3, #4
 8001772:	2b00      	cmp	r3, #0
 8001774:	f000 80a6 	beq.w	80018c4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001778:	2300      	movs	r3, #0
 800177a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800177c:	4b2a      	ldr	r3, [pc, #168]	@ (8001828 <HAL_RCC_OscConfig+0x504>)
 800177e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001780:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001784:	2b00      	cmp	r3, #0
 8001786:	d10d      	bne.n	80017a4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001788:	4b27      	ldr	r3, [pc, #156]	@ (8001828 <HAL_RCC_OscConfig+0x504>)
 800178a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800178c:	4a26      	ldr	r2, [pc, #152]	@ (8001828 <HAL_RCC_OscConfig+0x504>)
 800178e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001792:	6593      	str	r3, [r2, #88]	@ 0x58
 8001794:	4b24      	ldr	r3, [pc, #144]	@ (8001828 <HAL_RCC_OscConfig+0x504>)
 8001796:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001798:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800179c:	60bb      	str	r3, [r7, #8]
 800179e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017a0:	2301      	movs	r3, #1
 80017a2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017a4:	4b21      	ldr	r3, [pc, #132]	@ (800182c <HAL_RCC_OscConfig+0x508>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d118      	bne.n	80017e2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80017b0:	4b1e      	ldr	r3, [pc, #120]	@ (800182c <HAL_RCC_OscConfig+0x508>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a1d      	ldr	r2, [pc, #116]	@ (800182c <HAL_RCC_OscConfig+0x508>)
 80017b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017ba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017bc:	f7ff fa5e 	bl	8000c7c <HAL_GetTick>
 80017c0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017c2:	e008      	b.n	80017d6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017c4:	f7ff fa5a 	bl	8000c7c <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d901      	bls.n	80017d6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e17a      	b.n	8001acc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017d6:	4b15      	ldr	r3, [pc, #84]	@ (800182c <HAL_RCC_OscConfig+0x508>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d0f0      	beq.n	80017c4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d108      	bne.n	80017fc <HAL_RCC_OscConfig+0x4d8>
 80017ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001828 <HAL_RCC_OscConfig+0x504>)
 80017ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001828 <HAL_RCC_OscConfig+0x504>)
 80017f2:	f043 0301 	orr.w	r3, r3, #1
 80017f6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80017fa:	e029      	b.n	8001850 <HAL_RCC_OscConfig+0x52c>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	2b05      	cmp	r3, #5
 8001802:	d115      	bne.n	8001830 <HAL_RCC_OscConfig+0x50c>
 8001804:	4b08      	ldr	r3, [pc, #32]	@ (8001828 <HAL_RCC_OscConfig+0x504>)
 8001806:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800180a:	4a07      	ldr	r2, [pc, #28]	@ (8001828 <HAL_RCC_OscConfig+0x504>)
 800180c:	f043 0304 	orr.w	r3, r3, #4
 8001810:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001814:	4b04      	ldr	r3, [pc, #16]	@ (8001828 <HAL_RCC_OscConfig+0x504>)
 8001816:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800181a:	4a03      	ldr	r2, [pc, #12]	@ (8001828 <HAL_RCC_OscConfig+0x504>)
 800181c:	f043 0301 	orr.w	r3, r3, #1
 8001820:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001824:	e014      	b.n	8001850 <HAL_RCC_OscConfig+0x52c>
 8001826:	bf00      	nop
 8001828:	40021000 	.word	0x40021000
 800182c:	40007000 	.word	0x40007000
 8001830:	4b9c      	ldr	r3, [pc, #624]	@ (8001aa4 <HAL_RCC_OscConfig+0x780>)
 8001832:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001836:	4a9b      	ldr	r2, [pc, #620]	@ (8001aa4 <HAL_RCC_OscConfig+0x780>)
 8001838:	f023 0301 	bic.w	r3, r3, #1
 800183c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001840:	4b98      	ldr	r3, [pc, #608]	@ (8001aa4 <HAL_RCC_OscConfig+0x780>)
 8001842:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001846:	4a97      	ldr	r2, [pc, #604]	@ (8001aa4 <HAL_RCC_OscConfig+0x780>)
 8001848:	f023 0304 	bic.w	r3, r3, #4
 800184c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d016      	beq.n	8001886 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001858:	f7ff fa10 	bl	8000c7c <HAL_GetTick>
 800185c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800185e:	e00a      	b.n	8001876 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001860:	f7ff fa0c 	bl	8000c7c <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800186e:	4293      	cmp	r3, r2
 8001870:	d901      	bls.n	8001876 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e12a      	b.n	8001acc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001876:	4b8b      	ldr	r3, [pc, #556]	@ (8001aa4 <HAL_RCC_OscConfig+0x780>)
 8001878:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800187c:	f003 0302 	and.w	r3, r3, #2
 8001880:	2b00      	cmp	r3, #0
 8001882:	d0ed      	beq.n	8001860 <HAL_RCC_OscConfig+0x53c>
 8001884:	e015      	b.n	80018b2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001886:	f7ff f9f9 	bl	8000c7c <HAL_GetTick>
 800188a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800188c:	e00a      	b.n	80018a4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800188e:	f7ff f9f5 	bl	8000c7c <HAL_GetTick>
 8001892:	4602      	mov	r2, r0
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	f241 3288 	movw	r2, #5000	@ 0x1388
 800189c:	4293      	cmp	r3, r2
 800189e:	d901      	bls.n	80018a4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80018a0:	2303      	movs	r3, #3
 80018a2:	e113      	b.n	8001acc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018a4:	4b7f      	ldr	r3, [pc, #508]	@ (8001aa4 <HAL_RCC_OscConfig+0x780>)
 80018a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018aa:	f003 0302 	and.w	r3, r3, #2
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d1ed      	bne.n	800188e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80018b2:	7ffb      	ldrb	r3, [r7, #31]
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d105      	bne.n	80018c4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018b8:	4b7a      	ldr	r3, [pc, #488]	@ (8001aa4 <HAL_RCC_OscConfig+0x780>)
 80018ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018bc:	4a79      	ldr	r2, [pc, #484]	@ (8001aa4 <HAL_RCC_OscConfig+0x780>)
 80018be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80018c2:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	f000 80fe 	beq.w	8001aca <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	f040 80d0 	bne.w	8001a78 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80018d8:	4b72      	ldr	r3, [pc, #456]	@ (8001aa4 <HAL_RCC_OscConfig+0x780>)
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	f003 0203 	and.w	r2, r3, #3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d130      	bne.n	800194e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f6:	3b01      	subs	r3, #1
 80018f8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d127      	bne.n	800194e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001908:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800190a:	429a      	cmp	r2, r3
 800190c:	d11f      	bne.n	800194e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001914:	687a      	ldr	r2, [r7, #4]
 8001916:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001918:	2a07      	cmp	r2, #7
 800191a:	bf14      	ite	ne
 800191c:	2201      	movne	r2, #1
 800191e:	2200      	moveq	r2, #0
 8001920:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001922:	4293      	cmp	r3, r2
 8001924:	d113      	bne.n	800194e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001930:	085b      	lsrs	r3, r3, #1
 8001932:	3b01      	subs	r3, #1
 8001934:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001936:	429a      	cmp	r2, r3
 8001938:	d109      	bne.n	800194e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001944:	085b      	lsrs	r3, r3, #1
 8001946:	3b01      	subs	r3, #1
 8001948:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800194a:	429a      	cmp	r2, r3
 800194c:	d06e      	beq.n	8001a2c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	2b0c      	cmp	r3, #12
 8001952:	d069      	beq.n	8001a28 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001954:	4b53      	ldr	r3, [pc, #332]	@ (8001aa4 <HAL_RCC_OscConfig+0x780>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800195c:	2b00      	cmp	r3, #0
 800195e:	d105      	bne.n	800196c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001960:	4b50      	ldr	r3, [pc, #320]	@ (8001aa4 <HAL_RCC_OscConfig+0x780>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e0ad      	b.n	8001acc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001970:	4b4c      	ldr	r3, [pc, #304]	@ (8001aa4 <HAL_RCC_OscConfig+0x780>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a4b      	ldr	r2, [pc, #300]	@ (8001aa4 <HAL_RCC_OscConfig+0x780>)
 8001976:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800197a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800197c:	f7ff f97e 	bl	8000c7c <HAL_GetTick>
 8001980:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001982:	e008      	b.n	8001996 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001984:	f7ff f97a 	bl	8000c7c <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	2b02      	cmp	r3, #2
 8001990:	d901      	bls.n	8001996 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e09a      	b.n	8001acc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001996:	4b43      	ldr	r3, [pc, #268]	@ (8001aa4 <HAL_RCC_OscConfig+0x780>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d1f0      	bne.n	8001984 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019a2:	4b40      	ldr	r3, [pc, #256]	@ (8001aa4 <HAL_RCC_OscConfig+0x780>)
 80019a4:	68da      	ldr	r2, [r3, #12]
 80019a6:	4b40      	ldr	r3, [pc, #256]	@ (8001aa8 <HAL_RCC_OscConfig+0x784>)
 80019a8:	4013      	ands	r3, r2
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80019b2:	3a01      	subs	r2, #1
 80019b4:	0112      	lsls	r2, r2, #4
 80019b6:	4311      	orrs	r1, r2
 80019b8:	687a      	ldr	r2, [r7, #4]
 80019ba:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80019bc:	0212      	lsls	r2, r2, #8
 80019be:	4311      	orrs	r1, r2
 80019c0:	687a      	ldr	r2, [r7, #4]
 80019c2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80019c4:	0852      	lsrs	r2, r2, #1
 80019c6:	3a01      	subs	r2, #1
 80019c8:	0552      	lsls	r2, r2, #21
 80019ca:	4311      	orrs	r1, r2
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80019d0:	0852      	lsrs	r2, r2, #1
 80019d2:	3a01      	subs	r2, #1
 80019d4:	0652      	lsls	r2, r2, #25
 80019d6:	4311      	orrs	r1, r2
 80019d8:	687a      	ldr	r2, [r7, #4]
 80019da:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80019dc:	0912      	lsrs	r2, r2, #4
 80019de:	0452      	lsls	r2, r2, #17
 80019e0:	430a      	orrs	r2, r1
 80019e2:	4930      	ldr	r1, [pc, #192]	@ (8001aa4 <HAL_RCC_OscConfig+0x780>)
 80019e4:	4313      	orrs	r3, r2
 80019e6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80019e8:	4b2e      	ldr	r3, [pc, #184]	@ (8001aa4 <HAL_RCC_OscConfig+0x780>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a2d      	ldr	r2, [pc, #180]	@ (8001aa4 <HAL_RCC_OscConfig+0x780>)
 80019ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019f2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019f4:	4b2b      	ldr	r3, [pc, #172]	@ (8001aa4 <HAL_RCC_OscConfig+0x780>)
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	4a2a      	ldr	r2, [pc, #168]	@ (8001aa4 <HAL_RCC_OscConfig+0x780>)
 80019fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019fe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a00:	f7ff f93c 	bl	8000c7c <HAL_GetTick>
 8001a04:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a06:	e008      	b.n	8001a1a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a08:	f7ff f938 	bl	8000c7c <HAL_GetTick>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d901      	bls.n	8001a1a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e058      	b.n	8001acc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a1a:	4b22      	ldr	r3, [pc, #136]	@ (8001aa4 <HAL_RCC_OscConfig+0x780>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d0f0      	beq.n	8001a08 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a26:	e050      	b.n	8001aca <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e04f      	b.n	8001acc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a2c:	4b1d      	ldr	r3, [pc, #116]	@ (8001aa4 <HAL_RCC_OscConfig+0x780>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d148      	bne.n	8001aca <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001a38:	4b1a      	ldr	r3, [pc, #104]	@ (8001aa4 <HAL_RCC_OscConfig+0x780>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a19      	ldr	r2, [pc, #100]	@ (8001aa4 <HAL_RCC_OscConfig+0x780>)
 8001a3e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a42:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a44:	4b17      	ldr	r3, [pc, #92]	@ (8001aa4 <HAL_RCC_OscConfig+0x780>)
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	4a16      	ldr	r2, [pc, #88]	@ (8001aa4 <HAL_RCC_OscConfig+0x780>)
 8001a4a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a4e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a50:	f7ff f914 	bl	8000c7c <HAL_GetTick>
 8001a54:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a56:	e008      	b.n	8001a6a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a58:	f7ff f910 	bl	8000c7c <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e030      	b.n	8001acc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a6a:	4b0e      	ldr	r3, [pc, #56]	@ (8001aa4 <HAL_RCC_OscConfig+0x780>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d0f0      	beq.n	8001a58 <HAL_RCC_OscConfig+0x734>
 8001a76:	e028      	b.n	8001aca <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	2b0c      	cmp	r3, #12
 8001a7c:	d023      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a7e:	4b09      	ldr	r3, [pc, #36]	@ (8001aa4 <HAL_RCC_OscConfig+0x780>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a08      	ldr	r2, [pc, #32]	@ (8001aa4 <HAL_RCC_OscConfig+0x780>)
 8001a84:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a8a:	f7ff f8f7 	bl	8000c7c <HAL_GetTick>
 8001a8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a90:	e00c      	b.n	8001aac <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a92:	f7ff f8f3 	bl	8000c7c <HAL_GetTick>
 8001a96:	4602      	mov	r2, r0
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d905      	bls.n	8001aac <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	e013      	b.n	8001acc <HAL_RCC_OscConfig+0x7a8>
 8001aa4:	40021000 	.word	0x40021000
 8001aa8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001aac:	4b09      	ldr	r3, [pc, #36]	@ (8001ad4 <HAL_RCC_OscConfig+0x7b0>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d1ec      	bne.n	8001a92 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001ab8:	4b06      	ldr	r3, [pc, #24]	@ (8001ad4 <HAL_RCC_OscConfig+0x7b0>)
 8001aba:	68da      	ldr	r2, [r3, #12]
 8001abc:	4905      	ldr	r1, [pc, #20]	@ (8001ad4 <HAL_RCC_OscConfig+0x7b0>)
 8001abe:	4b06      	ldr	r3, [pc, #24]	@ (8001ad8 <HAL_RCC_OscConfig+0x7b4>)
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	60cb      	str	r3, [r1, #12]
 8001ac4:	e001      	b.n	8001aca <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e000      	b.n	8001acc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001aca:	2300      	movs	r3, #0
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3720      	adds	r7, #32
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	40021000 	.word	0x40021000
 8001ad8:	feeefffc 	.word	0xfeeefffc

08001adc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d101      	bne.n	8001af0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e0e7      	b.n	8001cc0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001af0:	4b75      	ldr	r3, [pc, #468]	@ (8001cc8 <HAL_RCC_ClockConfig+0x1ec>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0307 	and.w	r3, r3, #7
 8001af8:	683a      	ldr	r2, [r7, #0]
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d910      	bls.n	8001b20 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001afe:	4b72      	ldr	r3, [pc, #456]	@ (8001cc8 <HAL_RCC_ClockConfig+0x1ec>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f023 0207 	bic.w	r2, r3, #7
 8001b06:	4970      	ldr	r1, [pc, #448]	@ (8001cc8 <HAL_RCC_ClockConfig+0x1ec>)
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b0e:	4b6e      	ldr	r3, [pc, #440]	@ (8001cc8 <HAL_RCC_ClockConfig+0x1ec>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0307 	and.w	r3, r3, #7
 8001b16:	683a      	ldr	r2, [r7, #0]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d001      	beq.n	8001b20 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e0cf      	b.n	8001cc0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 0302 	and.w	r3, r3, #2
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d010      	beq.n	8001b4e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	689a      	ldr	r2, [r3, #8]
 8001b30:	4b66      	ldr	r3, [pc, #408]	@ (8001ccc <HAL_RCC_ClockConfig+0x1f0>)
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d908      	bls.n	8001b4e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b3c:	4b63      	ldr	r3, [pc, #396]	@ (8001ccc <HAL_RCC_ClockConfig+0x1f0>)
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	4960      	ldr	r1, [pc, #384]	@ (8001ccc <HAL_RCC_ClockConfig+0x1f0>)
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0301 	and.w	r3, r3, #1
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d04c      	beq.n	8001bf4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	2b03      	cmp	r3, #3
 8001b60:	d107      	bne.n	8001b72 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b62:	4b5a      	ldr	r3, [pc, #360]	@ (8001ccc <HAL_RCC_ClockConfig+0x1f0>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d121      	bne.n	8001bb2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e0a6      	b.n	8001cc0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d107      	bne.n	8001b8a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b7a:	4b54      	ldr	r3, [pc, #336]	@ (8001ccc <HAL_RCC_ClockConfig+0x1f0>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d115      	bne.n	8001bb2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e09a      	b.n	8001cc0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d107      	bne.n	8001ba2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b92:	4b4e      	ldr	r3, [pc, #312]	@ (8001ccc <HAL_RCC_ClockConfig+0x1f0>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0302 	and.w	r3, r3, #2
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d109      	bne.n	8001bb2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e08e      	b.n	8001cc0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ba2:	4b4a      	ldr	r3, [pc, #296]	@ (8001ccc <HAL_RCC_ClockConfig+0x1f0>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d101      	bne.n	8001bb2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e086      	b.n	8001cc0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001bb2:	4b46      	ldr	r3, [pc, #280]	@ (8001ccc <HAL_RCC_ClockConfig+0x1f0>)
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	f023 0203 	bic.w	r2, r3, #3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	4943      	ldr	r1, [pc, #268]	@ (8001ccc <HAL_RCC_ClockConfig+0x1f0>)
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001bc4:	f7ff f85a 	bl	8000c7c <HAL_GetTick>
 8001bc8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bca:	e00a      	b.n	8001be2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bcc:	f7ff f856 	bl	8000c7c <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d901      	bls.n	8001be2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e06e      	b.n	8001cc0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001be2:	4b3a      	ldr	r3, [pc, #232]	@ (8001ccc <HAL_RCC_ClockConfig+0x1f0>)
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f003 020c 	and.w	r2, r3, #12
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d1eb      	bne.n	8001bcc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0302 	and.w	r3, r3, #2
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d010      	beq.n	8001c22 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	689a      	ldr	r2, [r3, #8]
 8001c04:	4b31      	ldr	r3, [pc, #196]	@ (8001ccc <HAL_RCC_ClockConfig+0x1f0>)
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d208      	bcs.n	8001c22 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c10:	4b2e      	ldr	r3, [pc, #184]	@ (8001ccc <HAL_RCC_ClockConfig+0x1f0>)
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	492b      	ldr	r1, [pc, #172]	@ (8001ccc <HAL_RCC_ClockConfig+0x1f0>)
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c22:	4b29      	ldr	r3, [pc, #164]	@ (8001cc8 <HAL_RCC_ClockConfig+0x1ec>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0307 	and.w	r3, r3, #7
 8001c2a:	683a      	ldr	r2, [r7, #0]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d210      	bcs.n	8001c52 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c30:	4b25      	ldr	r3, [pc, #148]	@ (8001cc8 <HAL_RCC_ClockConfig+0x1ec>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f023 0207 	bic.w	r2, r3, #7
 8001c38:	4923      	ldr	r1, [pc, #140]	@ (8001cc8 <HAL_RCC_ClockConfig+0x1ec>)
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c40:	4b21      	ldr	r3, [pc, #132]	@ (8001cc8 <HAL_RCC_ClockConfig+0x1ec>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 0307 	and.w	r3, r3, #7
 8001c48:	683a      	ldr	r2, [r7, #0]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d001      	beq.n	8001c52 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e036      	b.n	8001cc0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0304 	and.w	r3, r3, #4
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d008      	beq.n	8001c70 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c5e:	4b1b      	ldr	r3, [pc, #108]	@ (8001ccc <HAL_RCC_ClockConfig+0x1f0>)
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	68db      	ldr	r3, [r3, #12]
 8001c6a:	4918      	ldr	r1, [pc, #96]	@ (8001ccc <HAL_RCC_ClockConfig+0x1f0>)
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 0308 	and.w	r3, r3, #8
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d009      	beq.n	8001c90 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c7c:	4b13      	ldr	r3, [pc, #76]	@ (8001ccc <HAL_RCC_ClockConfig+0x1f0>)
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	691b      	ldr	r3, [r3, #16]
 8001c88:	00db      	lsls	r3, r3, #3
 8001c8a:	4910      	ldr	r1, [pc, #64]	@ (8001ccc <HAL_RCC_ClockConfig+0x1f0>)
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c90:	f000 f824 	bl	8001cdc <HAL_RCC_GetSysClockFreq>
 8001c94:	4602      	mov	r2, r0
 8001c96:	4b0d      	ldr	r3, [pc, #52]	@ (8001ccc <HAL_RCC_ClockConfig+0x1f0>)
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	091b      	lsrs	r3, r3, #4
 8001c9c:	f003 030f 	and.w	r3, r3, #15
 8001ca0:	490b      	ldr	r1, [pc, #44]	@ (8001cd0 <HAL_RCC_ClockConfig+0x1f4>)
 8001ca2:	5ccb      	ldrb	r3, [r1, r3]
 8001ca4:	f003 031f 	and.w	r3, r3, #31
 8001ca8:	fa22 f303 	lsr.w	r3, r2, r3
 8001cac:	4a09      	ldr	r2, [pc, #36]	@ (8001cd4 <HAL_RCC_ClockConfig+0x1f8>)
 8001cae:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001cb0:	4b09      	ldr	r3, [pc, #36]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1fc>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7fe ff91 	bl	8000bdc <HAL_InitTick>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	72fb      	strb	r3, [r7, #11]

  return status;
 8001cbe:	7afb      	ldrb	r3, [r7, #11]
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3710      	adds	r7, #16
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	40022000 	.word	0x40022000
 8001ccc:	40021000 	.word	0x40021000
 8001cd0:	08003350 	.word	0x08003350
 8001cd4:	20000004 	.word	0x20000004
 8001cd8:	20000008 	.word	0x20000008

08001cdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b089      	sub	sp, #36	@ 0x24
 8001ce0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	61fb      	str	r3, [r7, #28]
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cea:	4b3e      	ldr	r3, [pc, #248]	@ (8001de4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	f003 030c 	and.w	r3, r3, #12
 8001cf2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cf4:	4b3b      	ldr	r3, [pc, #236]	@ (8001de4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	f003 0303 	and.w	r3, r3, #3
 8001cfc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d005      	beq.n	8001d10 <HAL_RCC_GetSysClockFreq+0x34>
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	2b0c      	cmp	r3, #12
 8001d08:	d121      	bne.n	8001d4e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d11e      	bne.n	8001d4e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001d10:	4b34      	ldr	r3, [pc, #208]	@ (8001de4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0308 	and.w	r3, r3, #8
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d107      	bne.n	8001d2c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001d1c:	4b31      	ldr	r3, [pc, #196]	@ (8001de4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d22:	0a1b      	lsrs	r3, r3, #8
 8001d24:	f003 030f 	and.w	r3, r3, #15
 8001d28:	61fb      	str	r3, [r7, #28]
 8001d2a:	e005      	b.n	8001d38 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001d2c:	4b2d      	ldr	r3, [pc, #180]	@ (8001de4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	091b      	lsrs	r3, r3, #4
 8001d32:	f003 030f 	and.w	r3, r3, #15
 8001d36:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001d38:	4a2b      	ldr	r2, [pc, #172]	@ (8001de8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d40:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d10d      	bne.n	8001d64 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d4c:	e00a      	b.n	8001d64 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	2b04      	cmp	r3, #4
 8001d52:	d102      	bne.n	8001d5a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d54:	4b25      	ldr	r3, [pc, #148]	@ (8001dec <HAL_RCC_GetSysClockFreq+0x110>)
 8001d56:	61bb      	str	r3, [r7, #24]
 8001d58:	e004      	b.n	8001d64 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	2b08      	cmp	r3, #8
 8001d5e:	d101      	bne.n	8001d64 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d60:	4b23      	ldr	r3, [pc, #140]	@ (8001df0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d62:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	2b0c      	cmp	r3, #12
 8001d68:	d134      	bne.n	8001dd4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d6a:	4b1e      	ldr	r3, [pc, #120]	@ (8001de4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d6c:	68db      	ldr	r3, [r3, #12]
 8001d6e:	f003 0303 	and.w	r3, r3, #3
 8001d72:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d003      	beq.n	8001d82 <HAL_RCC_GetSysClockFreq+0xa6>
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	2b03      	cmp	r3, #3
 8001d7e:	d003      	beq.n	8001d88 <HAL_RCC_GetSysClockFreq+0xac>
 8001d80:	e005      	b.n	8001d8e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001d82:	4b1a      	ldr	r3, [pc, #104]	@ (8001dec <HAL_RCC_GetSysClockFreq+0x110>)
 8001d84:	617b      	str	r3, [r7, #20]
      break;
 8001d86:	e005      	b.n	8001d94 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001d88:	4b19      	ldr	r3, [pc, #100]	@ (8001df0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d8a:	617b      	str	r3, [r7, #20]
      break;
 8001d8c:	e002      	b.n	8001d94 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	617b      	str	r3, [r7, #20]
      break;
 8001d92:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d94:	4b13      	ldr	r3, [pc, #76]	@ (8001de4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	091b      	lsrs	r3, r3, #4
 8001d9a:	f003 0307 	and.w	r3, r3, #7
 8001d9e:	3301      	adds	r3, #1
 8001da0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001da2:	4b10      	ldr	r3, [pc, #64]	@ (8001de4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001da4:	68db      	ldr	r3, [r3, #12]
 8001da6:	0a1b      	lsrs	r3, r3, #8
 8001da8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001dac:	697a      	ldr	r2, [r7, #20]
 8001dae:	fb03 f202 	mul.w	r2, r3, r2
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001db8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001dba:	4b0a      	ldr	r3, [pc, #40]	@ (8001de4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dbc:	68db      	ldr	r3, [r3, #12]
 8001dbe:	0e5b      	lsrs	r3, r3, #25
 8001dc0:	f003 0303 	and.w	r3, r3, #3
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	005b      	lsls	r3, r3, #1
 8001dc8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001dca:	697a      	ldr	r2, [r7, #20]
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dd2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001dd4:	69bb      	ldr	r3, [r7, #24]
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3724      	adds	r7, #36	@ 0x24
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	40021000 	.word	0x40021000
 8001de8:	08003368 	.word	0x08003368
 8001dec:	00f42400 	.word	0x00f42400
 8001df0:	007a1200 	.word	0x007a1200

08001df4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001df8:	4b03      	ldr	r3, [pc, #12]	@ (8001e08 <HAL_RCC_GetHCLKFreq+0x14>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	20000004 	.word	0x20000004

08001e0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001e10:	f7ff fff0 	bl	8001df4 <HAL_RCC_GetHCLKFreq>
 8001e14:	4602      	mov	r2, r0
 8001e16:	4b06      	ldr	r3, [pc, #24]	@ (8001e30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	0a1b      	lsrs	r3, r3, #8
 8001e1c:	f003 0307 	and.w	r3, r3, #7
 8001e20:	4904      	ldr	r1, [pc, #16]	@ (8001e34 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e22:	5ccb      	ldrb	r3, [r1, r3]
 8001e24:	f003 031f 	and.w	r3, r3, #31
 8001e28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	40021000 	.word	0x40021000
 8001e34:	08003360 	.word	0x08003360

08001e38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001e3c:	f7ff ffda 	bl	8001df4 <HAL_RCC_GetHCLKFreq>
 8001e40:	4602      	mov	r2, r0
 8001e42:	4b06      	ldr	r3, [pc, #24]	@ (8001e5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	0adb      	lsrs	r3, r3, #11
 8001e48:	f003 0307 	and.w	r3, r3, #7
 8001e4c:	4904      	ldr	r1, [pc, #16]	@ (8001e60 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001e4e:	5ccb      	ldrb	r3, [r1, r3]
 8001e50:	f003 031f 	and.w	r3, r3, #31
 8001e54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	40021000 	.word	0x40021000
 8001e60:	08003360 	.word	0x08003360

08001e64 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b086      	sub	sp, #24
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e70:	4b2a      	ldr	r3, [pc, #168]	@ (8001f1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d003      	beq.n	8001e84 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001e7c:	f7ff f9ee 	bl	800125c <HAL_PWREx_GetVoltageRange>
 8001e80:	6178      	str	r0, [r7, #20]
 8001e82:	e014      	b.n	8001eae <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e84:	4b25      	ldr	r3, [pc, #148]	@ (8001f1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e88:	4a24      	ldr	r2, [pc, #144]	@ (8001f1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e8e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e90:	4b22      	ldr	r3, [pc, #136]	@ (8001f1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e98:	60fb      	str	r3, [r7, #12]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001e9c:	f7ff f9de 	bl	800125c <HAL_PWREx_GetVoltageRange>
 8001ea0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001ea2:	4b1e      	ldr	r3, [pc, #120]	@ (8001f1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ea4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ea6:	4a1d      	ldr	r2, [pc, #116]	@ (8001f1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ea8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001eac:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001eb4:	d10b      	bne.n	8001ece <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2b80      	cmp	r3, #128	@ 0x80
 8001eba:	d919      	bls.n	8001ef0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2ba0      	cmp	r3, #160	@ 0xa0
 8001ec0:	d902      	bls.n	8001ec8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	613b      	str	r3, [r7, #16]
 8001ec6:	e013      	b.n	8001ef0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ec8:	2301      	movs	r3, #1
 8001eca:	613b      	str	r3, [r7, #16]
 8001ecc:	e010      	b.n	8001ef0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2b80      	cmp	r3, #128	@ 0x80
 8001ed2:	d902      	bls.n	8001eda <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	613b      	str	r3, [r7, #16]
 8001ed8:	e00a      	b.n	8001ef0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2b80      	cmp	r3, #128	@ 0x80
 8001ede:	d102      	bne.n	8001ee6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	613b      	str	r3, [r7, #16]
 8001ee4:	e004      	b.n	8001ef0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2b70      	cmp	r3, #112	@ 0x70
 8001eea:	d101      	bne.n	8001ef0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001eec:	2301      	movs	r3, #1
 8001eee:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001ef0:	4b0b      	ldr	r3, [pc, #44]	@ (8001f20 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f023 0207 	bic.w	r2, r3, #7
 8001ef8:	4909      	ldr	r1, [pc, #36]	@ (8001f20 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001f00:	4b07      	ldr	r3, [pc, #28]	@ (8001f20 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0307 	and.w	r3, r3, #7
 8001f08:	693a      	ldr	r2, [r7, #16]
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d001      	beq.n	8001f12 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e000      	b.n	8001f14 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001f12:	2300      	movs	r3, #0
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3718      	adds	r7, #24
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	40021000 	.word	0x40021000
 8001f20:	40022000 	.word	0x40022000

08001f24 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b086      	sub	sp, #24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f30:	2300      	movs	r3, #0
 8001f32:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d041      	beq.n	8001fc4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001f44:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001f48:	d02a      	beq.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001f4a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001f4e:	d824      	bhi.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001f50:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001f54:	d008      	beq.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001f56:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001f5a:	d81e      	bhi.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d00a      	beq.n	8001f76 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001f60:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001f64:	d010      	beq.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001f66:	e018      	b.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001f68:	4b86      	ldr	r3, [pc, #536]	@ (8002184 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	4a85      	ldr	r2, [pc, #532]	@ (8002184 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f72:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f74:	e015      	b.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	3304      	adds	r3, #4
 8001f7a:	2100      	movs	r1, #0
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f000 fabb 	bl	80024f8 <RCCEx_PLLSAI1_Config>
 8001f82:	4603      	mov	r3, r0
 8001f84:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f86:	e00c      	b.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	3320      	adds	r3, #32
 8001f8c:	2100      	movs	r1, #0
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f000 fba6 	bl	80026e0 <RCCEx_PLLSAI2_Config>
 8001f94:	4603      	mov	r3, r0
 8001f96:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f98:	e003      	b.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	74fb      	strb	r3, [r7, #19]
      break;
 8001f9e:	e000      	b.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001fa0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001fa2:	7cfb      	ldrb	r3, [r7, #19]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d10b      	bne.n	8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001fa8:	4b76      	ldr	r3, [pc, #472]	@ (8002184 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fae:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001fb6:	4973      	ldr	r1, [pc, #460]	@ (8002184 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001fbe:	e001      	b.n	8001fc4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fc0:	7cfb      	ldrb	r3, [r7, #19]
 8001fc2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d041      	beq.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001fd4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001fd8:	d02a      	beq.n	8002030 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001fda:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001fde:	d824      	bhi.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001fe0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001fe4:	d008      	beq.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001fe6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001fea:	d81e      	bhi.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d00a      	beq.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001ff0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ff4:	d010      	beq.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001ff6:	e018      	b.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001ff8:	4b62      	ldr	r3, [pc, #392]	@ (8002184 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	4a61      	ldr	r2, [pc, #388]	@ (8002184 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ffe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002002:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002004:	e015      	b.n	8002032 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	3304      	adds	r3, #4
 800200a:	2100      	movs	r1, #0
 800200c:	4618      	mov	r0, r3
 800200e:	f000 fa73 	bl	80024f8 <RCCEx_PLLSAI1_Config>
 8002012:	4603      	mov	r3, r0
 8002014:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002016:	e00c      	b.n	8002032 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	3320      	adds	r3, #32
 800201c:	2100      	movs	r1, #0
 800201e:	4618      	mov	r0, r3
 8002020:	f000 fb5e 	bl	80026e0 <RCCEx_PLLSAI2_Config>
 8002024:	4603      	mov	r3, r0
 8002026:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002028:	e003      	b.n	8002032 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	74fb      	strb	r3, [r7, #19]
      break;
 800202e:	e000      	b.n	8002032 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002030:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002032:	7cfb      	ldrb	r3, [r7, #19]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d10b      	bne.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002038:	4b52      	ldr	r3, [pc, #328]	@ (8002184 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800203a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800203e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002046:	494f      	ldr	r1, [pc, #316]	@ (8002184 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002048:	4313      	orrs	r3, r2
 800204a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800204e:	e001      	b.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002050:	7cfb      	ldrb	r3, [r7, #19]
 8002052:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800205c:	2b00      	cmp	r3, #0
 800205e:	f000 80a0 	beq.w	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002062:	2300      	movs	r3, #0
 8002064:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002066:	4b47      	ldr	r3, [pc, #284]	@ (8002184 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002068:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800206a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d101      	bne.n	8002076 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002072:	2301      	movs	r3, #1
 8002074:	e000      	b.n	8002078 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002076:	2300      	movs	r3, #0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d00d      	beq.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800207c:	4b41      	ldr	r3, [pc, #260]	@ (8002184 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800207e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002080:	4a40      	ldr	r2, [pc, #256]	@ (8002184 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002082:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002086:	6593      	str	r3, [r2, #88]	@ 0x58
 8002088:	4b3e      	ldr	r3, [pc, #248]	@ (8002184 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800208a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800208c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002090:	60bb      	str	r3, [r7, #8]
 8002092:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002094:	2301      	movs	r3, #1
 8002096:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002098:	4b3b      	ldr	r3, [pc, #236]	@ (8002188 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a3a      	ldr	r2, [pc, #232]	@ (8002188 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800209e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020a2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80020a4:	f7fe fdea 	bl	8000c7c <HAL_GetTick>
 80020a8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80020aa:	e009      	b.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020ac:	f7fe fde6 	bl	8000c7c <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d902      	bls.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	74fb      	strb	r3, [r7, #19]
        break;
 80020be:	e005      	b.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80020c0:	4b31      	ldr	r3, [pc, #196]	@ (8002188 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d0ef      	beq.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80020cc:	7cfb      	ldrb	r3, [r7, #19]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d15c      	bne.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80020d2:	4b2c      	ldr	r3, [pc, #176]	@ (8002184 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020d8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80020dc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d01f      	beq.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80020ea:	697a      	ldr	r2, [r7, #20]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d019      	beq.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80020f0:	4b24      	ldr	r3, [pc, #144]	@ (8002184 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80020fa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80020fc:	4b21      	ldr	r3, [pc, #132]	@ (8002184 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002102:	4a20      	ldr	r2, [pc, #128]	@ (8002184 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002104:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002108:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800210c:	4b1d      	ldr	r3, [pc, #116]	@ (8002184 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800210e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002112:	4a1c      	ldr	r2, [pc, #112]	@ (8002184 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002114:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002118:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800211c:	4a19      	ldr	r2, [pc, #100]	@ (8002184 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	f003 0301 	and.w	r3, r3, #1
 800212a:	2b00      	cmp	r3, #0
 800212c:	d016      	beq.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800212e:	f7fe fda5 	bl	8000c7c <HAL_GetTick>
 8002132:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002134:	e00b      	b.n	800214e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002136:	f7fe fda1 	bl	8000c7c <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002144:	4293      	cmp	r3, r2
 8002146:	d902      	bls.n	800214e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	74fb      	strb	r3, [r7, #19]
            break;
 800214c:	e006      	b.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800214e:	4b0d      	ldr	r3, [pc, #52]	@ (8002184 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002150:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002154:	f003 0302 	and.w	r3, r3, #2
 8002158:	2b00      	cmp	r3, #0
 800215a:	d0ec      	beq.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800215c:	7cfb      	ldrb	r3, [r7, #19]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d10c      	bne.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002162:	4b08      	ldr	r3, [pc, #32]	@ (8002184 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002164:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002168:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002172:	4904      	ldr	r1, [pc, #16]	@ (8002184 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002174:	4313      	orrs	r3, r2
 8002176:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800217a:	e009      	b.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800217c:	7cfb      	ldrb	r3, [r7, #19]
 800217e:	74bb      	strb	r3, [r7, #18]
 8002180:	e006      	b.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002182:	bf00      	nop
 8002184:	40021000 	.word	0x40021000
 8002188:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800218c:	7cfb      	ldrb	r3, [r7, #19]
 800218e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002190:	7c7b      	ldrb	r3, [r7, #17]
 8002192:	2b01      	cmp	r3, #1
 8002194:	d105      	bne.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002196:	4b9e      	ldr	r3, [pc, #632]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002198:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800219a:	4a9d      	ldr	r2, [pc, #628]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800219c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021a0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0301 	and.w	r3, r3, #1
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d00a      	beq.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021ae:	4b98      	ldr	r3, [pc, #608]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021b4:	f023 0203 	bic.w	r2, r3, #3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021bc:	4994      	ldr	r1, [pc, #592]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021be:	4313      	orrs	r3, r2
 80021c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0302 	and.w	r3, r3, #2
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d00a      	beq.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80021d0:	4b8f      	ldr	r3, [pc, #572]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021d6:	f023 020c 	bic.w	r2, r3, #12
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021de:	498c      	ldr	r1, [pc, #560]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021e0:	4313      	orrs	r3, r2
 80021e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0304 	and.w	r3, r3, #4
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d00a      	beq.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80021f2:	4b87      	ldr	r3, [pc, #540]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021f8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002200:	4983      	ldr	r1, [pc, #524]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002202:	4313      	orrs	r3, r2
 8002204:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0308 	and.w	r3, r3, #8
 8002210:	2b00      	cmp	r3, #0
 8002212:	d00a      	beq.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002214:	4b7e      	ldr	r3, [pc, #504]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002216:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800221a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002222:	497b      	ldr	r1, [pc, #492]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002224:	4313      	orrs	r3, r2
 8002226:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0310 	and.w	r3, r3, #16
 8002232:	2b00      	cmp	r3, #0
 8002234:	d00a      	beq.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002236:	4b76      	ldr	r3, [pc, #472]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002238:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800223c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002244:	4972      	ldr	r1, [pc, #456]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002246:	4313      	orrs	r3, r2
 8002248:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0320 	and.w	r3, r3, #32
 8002254:	2b00      	cmp	r3, #0
 8002256:	d00a      	beq.n	800226e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002258:	4b6d      	ldr	r3, [pc, #436]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800225a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800225e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002266:	496a      	ldr	r1, [pc, #424]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002268:	4313      	orrs	r3, r2
 800226a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002276:	2b00      	cmp	r3, #0
 8002278:	d00a      	beq.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800227a:	4b65      	ldr	r3, [pc, #404]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800227c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002280:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002288:	4961      	ldr	r1, [pc, #388]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800228a:	4313      	orrs	r3, r2
 800228c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002298:	2b00      	cmp	r3, #0
 800229a:	d00a      	beq.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800229c:	4b5c      	ldr	r3, [pc, #368]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800229e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022a2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022aa:	4959      	ldr	r1, [pc, #356]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ac:	4313      	orrs	r3, r2
 80022ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d00a      	beq.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022be:	4b54      	ldr	r3, [pc, #336]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022c4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022cc:	4950      	ldr	r1, [pc, #320]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d00a      	beq.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80022e0:	4b4b      	ldr	r3, [pc, #300]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022e6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022ee:	4948      	ldr	r1, [pc, #288]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022f0:	4313      	orrs	r3, r2
 80022f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d00a      	beq.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002302:	4b43      	ldr	r3, [pc, #268]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002304:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002308:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002310:	493f      	ldr	r1, [pc, #252]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002312:	4313      	orrs	r3, r2
 8002314:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d028      	beq.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002324:	4b3a      	ldr	r3, [pc, #232]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002326:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800232a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002332:	4937      	ldr	r1, [pc, #220]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002334:	4313      	orrs	r3, r2
 8002336:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800233e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002342:	d106      	bne.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002344:	4b32      	ldr	r3, [pc, #200]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	4a31      	ldr	r2, [pc, #196]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800234a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800234e:	60d3      	str	r3, [r2, #12]
 8002350:	e011      	b.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002356:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800235a:	d10c      	bne.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	3304      	adds	r3, #4
 8002360:	2101      	movs	r1, #1
 8002362:	4618      	mov	r0, r3
 8002364:	f000 f8c8 	bl	80024f8 <RCCEx_PLLSAI1_Config>
 8002368:	4603      	mov	r3, r0
 800236a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800236c:	7cfb      	ldrb	r3, [r7, #19]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d001      	beq.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002372:	7cfb      	ldrb	r3, [r7, #19]
 8002374:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d028      	beq.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002382:	4b23      	ldr	r3, [pc, #140]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002384:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002388:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002390:	491f      	ldr	r1, [pc, #124]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002392:	4313      	orrs	r3, r2
 8002394:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800239c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80023a0:	d106      	bne.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023a2:	4b1b      	ldr	r3, [pc, #108]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	4a1a      	ldr	r2, [pc, #104]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023a8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80023ac:	60d3      	str	r3, [r2, #12]
 80023ae:	e011      	b.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023b4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80023b8:	d10c      	bne.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	3304      	adds	r3, #4
 80023be:	2101      	movs	r1, #1
 80023c0:	4618      	mov	r0, r3
 80023c2:	f000 f899 	bl	80024f8 <RCCEx_PLLSAI1_Config>
 80023c6:	4603      	mov	r3, r0
 80023c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023ca:	7cfb      	ldrb	r3, [r7, #19]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d001      	beq.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80023d0:	7cfb      	ldrb	r3, [r7, #19]
 80023d2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d02b      	beq.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80023e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023e6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023ee:	4908      	ldr	r1, [pc, #32]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023f0:	4313      	orrs	r3, r2
 80023f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80023fe:	d109      	bne.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002400:	4b03      	ldr	r3, [pc, #12]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	4a02      	ldr	r2, [pc, #8]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002406:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800240a:	60d3      	str	r3, [r2, #12]
 800240c:	e014      	b.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800240e:	bf00      	nop
 8002410:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002418:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800241c:	d10c      	bne.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	3304      	adds	r3, #4
 8002422:	2101      	movs	r1, #1
 8002424:	4618      	mov	r0, r3
 8002426:	f000 f867 	bl	80024f8 <RCCEx_PLLSAI1_Config>
 800242a:	4603      	mov	r3, r0
 800242c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800242e:	7cfb      	ldrb	r3, [r7, #19]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d001      	beq.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002434:	7cfb      	ldrb	r3, [r7, #19]
 8002436:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d02f      	beq.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002444:	4b2b      	ldr	r3, [pc, #172]	@ (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002446:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800244a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002452:	4928      	ldr	r1, [pc, #160]	@ (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002454:	4313      	orrs	r3, r2
 8002456:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800245e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002462:	d10d      	bne.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	3304      	adds	r3, #4
 8002468:	2102      	movs	r1, #2
 800246a:	4618      	mov	r0, r3
 800246c:	f000 f844 	bl	80024f8 <RCCEx_PLLSAI1_Config>
 8002470:	4603      	mov	r3, r0
 8002472:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002474:	7cfb      	ldrb	r3, [r7, #19]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d014      	beq.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800247a:	7cfb      	ldrb	r3, [r7, #19]
 800247c:	74bb      	strb	r3, [r7, #18]
 800247e:	e011      	b.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002484:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002488:	d10c      	bne.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	3320      	adds	r3, #32
 800248e:	2102      	movs	r1, #2
 8002490:	4618      	mov	r0, r3
 8002492:	f000 f925 	bl	80026e0 <RCCEx_PLLSAI2_Config>
 8002496:	4603      	mov	r3, r0
 8002498:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800249a:	7cfb      	ldrb	r3, [r7, #19]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d001      	beq.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80024a0:	7cfb      	ldrb	r3, [r7, #19]
 80024a2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d00a      	beq.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80024b0:	4b10      	ldr	r3, [pc, #64]	@ (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024b6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80024be:	490d      	ldr	r1, [pc, #52]	@ (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024c0:	4313      	orrs	r3, r2
 80024c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d00b      	beq.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80024d2:	4b08      	ldr	r3, [pc, #32]	@ (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024d8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80024e2:	4904      	ldr	r1, [pc, #16]	@ (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80024ea:	7cbb      	ldrb	r3, [r7, #18]
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3718      	adds	r7, #24
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	40021000 	.word	0x40021000

080024f8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002502:	2300      	movs	r3, #0
 8002504:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002506:	4b75      	ldr	r3, [pc, #468]	@ (80026dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	f003 0303 	and.w	r3, r3, #3
 800250e:	2b00      	cmp	r3, #0
 8002510:	d018      	beq.n	8002544 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002512:	4b72      	ldr	r3, [pc, #456]	@ (80026dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	f003 0203 	and.w	r2, r3, #3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	429a      	cmp	r2, r3
 8002520:	d10d      	bne.n	800253e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
       ||
 8002526:	2b00      	cmp	r3, #0
 8002528:	d009      	beq.n	800253e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800252a:	4b6c      	ldr	r3, [pc, #432]	@ (80026dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	091b      	lsrs	r3, r3, #4
 8002530:	f003 0307 	and.w	r3, r3, #7
 8002534:	1c5a      	adds	r2, r3, #1
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685b      	ldr	r3, [r3, #4]
       ||
 800253a:	429a      	cmp	r2, r3
 800253c:	d047      	beq.n	80025ce <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	73fb      	strb	r3, [r7, #15]
 8002542:	e044      	b.n	80025ce <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	2b03      	cmp	r3, #3
 800254a:	d018      	beq.n	800257e <RCCEx_PLLSAI1_Config+0x86>
 800254c:	2b03      	cmp	r3, #3
 800254e:	d825      	bhi.n	800259c <RCCEx_PLLSAI1_Config+0xa4>
 8002550:	2b01      	cmp	r3, #1
 8002552:	d002      	beq.n	800255a <RCCEx_PLLSAI1_Config+0x62>
 8002554:	2b02      	cmp	r3, #2
 8002556:	d009      	beq.n	800256c <RCCEx_PLLSAI1_Config+0x74>
 8002558:	e020      	b.n	800259c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800255a:	4b60      	ldr	r3, [pc, #384]	@ (80026dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0302 	and.w	r3, r3, #2
 8002562:	2b00      	cmp	r3, #0
 8002564:	d11d      	bne.n	80025a2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800256a:	e01a      	b.n	80025a2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800256c:	4b5b      	ldr	r3, [pc, #364]	@ (80026dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002574:	2b00      	cmp	r3, #0
 8002576:	d116      	bne.n	80025a6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800257c:	e013      	b.n	80025a6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800257e:	4b57      	ldr	r3, [pc, #348]	@ (80026dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d10f      	bne.n	80025aa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800258a:	4b54      	ldr	r3, [pc, #336]	@ (80026dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d109      	bne.n	80025aa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800259a:	e006      	b.n	80025aa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	73fb      	strb	r3, [r7, #15]
      break;
 80025a0:	e004      	b.n	80025ac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025a2:	bf00      	nop
 80025a4:	e002      	b.n	80025ac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025a6:	bf00      	nop
 80025a8:	e000      	b.n	80025ac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025aa:	bf00      	nop
    }

    if(status == HAL_OK)
 80025ac:	7bfb      	ldrb	r3, [r7, #15]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d10d      	bne.n	80025ce <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80025b2:	4b4a      	ldr	r3, [pc, #296]	@ (80026dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6819      	ldr	r1, [r3, #0]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	3b01      	subs	r3, #1
 80025c4:	011b      	lsls	r3, r3, #4
 80025c6:	430b      	orrs	r3, r1
 80025c8:	4944      	ldr	r1, [pc, #272]	@ (80026dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80025ca:	4313      	orrs	r3, r2
 80025cc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80025ce:	7bfb      	ldrb	r3, [r7, #15]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d17d      	bne.n	80026d0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80025d4:	4b41      	ldr	r3, [pc, #260]	@ (80026dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a40      	ldr	r2, [pc, #256]	@ (80026dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80025da:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80025de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025e0:	f7fe fb4c 	bl	8000c7c <HAL_GetTick>
 80025e4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80025e6:	e009      	b.n	80025fc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80025e8:	f7fe fb48 	bl	8000c7c <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d902      	bls.n	80025fc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	73fb      	strb	r3, [r7, #15]
        break;
 80025fa:	e005      	b.n	8002608 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80025fc:	4b37      	ldr	r3, [pc, #220]	@ (80026dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d1ef      	bne.n	80025e8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002608:	7bfb      	ldrb	r3, [r7, #15]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d160      	bne.n	80026d0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d111      	bne.n	8002638 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002614:	4b31      	ldr	r3, [pc, #196]	@ (80026dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002616:	691b      	ldr	r3, [r3, #16]
 8002618:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800261c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	6892      	ldr	r2, [r2, #8]
 8002624:	0211      	lsls	r1, r2, #8
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	68d2      	ldr	r2, [r2, #12]
 800262a:	0912      	lsrs	r2, r2, #4
 800262c:	0452      	lsls	r2, r2, #17
 800262e:	430a      	orrs	r2, r1
 8002630:	492a      	ldr	r1, [pc, #168]	@ (80026dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002632:	4313      	orrs	r3, r2
 8002634:	610b      	str	r3, [r1, #16]
 8002636:	e027      	b.n	8002688 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	2b01      	cmp	r3, #1
 800263c:	d112      	bne.n	8002664 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800263e:	4b27      	ldr	r3, [pc, #156]	@ (80026dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002640:	691b      	ldr	r3, [r3, #16]
 8002642:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002646:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	6892      	ldr	r2, [r2, #8]
 800264e:	0211      	lsls	r1, r2, #8
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	6912      	ldr	r2, [r2, #16]
 8002654:	0852      	lsrs	r2, r2, #1
 8002656:	3a01      	subs	r2, #1
 8002658:	0552      	lsls	r2, r2, #21
 800265a:	430a      	orrs	r2, r1
 800265c:	491f      	ldr	r1, [pc, #124]	@ (80026dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800265e:	4313      	orrs	r3, r2
 8002660:	610b      	str	r3, [r1, #16]
 8002662:	e011      	b.n	8002688 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002664:	4b1d      	ldr	r3, [pc, #116]	@ (80026dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002666:	691b      	ldr	r3, [r3, #16]
 8002668:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800266c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	6892      	ldr	r2, [r2, #8]
 8002674:	0211      	lsls	r1, r2, #8
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	6952      	ldr	r2, [r2, #20]
 800267a:	0852      	lsrs	r2, r2, #1
 800267c:	3a01      	subs	r2, #1
 800267e:	0652      	lsls	r2, r2, #25
 8002680:	430a      	orrs	r2, r1
 8002682:	4916      	ldr	r1, [pc, #88]	@ (80026dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002684:	4313      	orrs	r3, r2
 8002686:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002688:	4b14      	ldr	r3, [pc, #80]	@ (80026dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a13      	ldr	r2, [pc, #76]	@ (80026dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800268e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002692:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002694:	f7fe faf2 	bl	8000c7c <HAL_GetTick>
 8002698:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800269a:	e009      	b.n	80026b0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800269c:	f7fe faee 	bl	8000c7c <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d902      	bls.n	80026b0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	73fb      	strb	r3, [r7, #15]
          break;
 80026ae:	e005      	b.n	80026bc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80026b0:	4b0a      	ldr	r3, [pc, #40]	@ (80026dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d0ef      	beq.n	800269c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80026bc:	7bfb      	ldrb	r3, [r7, #15]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d106      	bne.n	80026d0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80026c2:	4b06      	ldr	r3, [pc, #24]	@ (80026dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80026c4:	691a      	ldr	r2, [r3, #16]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	699b      	ldr	r3, [r3, #24]
 80026ca:	4904      	ldr	r1, [pc, #16]	@ (80026dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80026d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3710      	adds	r7, #16
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	40021000 	.word	0x40021000

080026e0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80026ea:	2300      	movs	r3, #0
 80026ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80026ee:	4b6a      	ldr	r3, [pc, #424]	@ (8002898 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	f003 0303 	and.w	r3, r3, #3
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d018      	beq.n	800272c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80026fa:	4b67      	ldr	r3, [pc, #412]	@ (8002898 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	f003 0203 	and.w	r2, r3, #3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	429a      	cmp	r2, r3
 8002708:	d10d      	bne.n	8002726 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
       ||
 800270e:	2b00      	cmp	r3, #0
 8002710:	d009      	beq.n	8002726 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002712:	4b61      	ldr	r3, [pc, #388]	@ (8002898 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	091b      	lsrs	r3, r3, #4
 8002718:	f003 0307 	and.w	r3, r3, #7
 800271c:	1c5a      	adds	r2, r3, #1
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
       ||
 8002722:	429a      	cmp	r2, r3
 8002724:	d047      	beq.n	80027b6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	73fb      	strb	r3, [r7, #15]
 800272a:	e044      	b.n	80027b6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2b03      	cmp	r3, #3
 8002732:	d018      	beq.n	8002766 <RCCEx_PLLSAI2_Config+0x86>
 8002734:	2b03      	cmp	r3, #3
 8002736:	d825      	bhi.n	8002784 <RCCEx_PLLSAI2_Config+0xa4>
 8002738:	2b01      	cmp	r3, #1
 800273a:	d002      	beq.n	8002742 <RCCEx_PLLSAI2_Config+0x62>
 800273c:	2b02      	cmp	r3, #2
 800273e:	d009      	beq.n	8002754 <RCCEx_PLLSAI2_Config+0x74>
 8002740:	e020      	b.n	8002784 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002742:	4b55      	ldr	r3, [pc, #340]	@ (8002898 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0302 	and.w	r3, r3, #2
 800274a:	2b00      	cmp	r3, #0
 800274c:	d11d      	bne.n	800278a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002752:	e01a      	b.n	800278a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002754:	4b50      	ldr	r3, [pc, #320]	@ (8002898 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800275c:	2b00      	cmp	r3, #0
 800275e:	d116      	bne.n	800278e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002764:	e013      	b.n	800278e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002766:	4b4c      	ldr	r3, [pc, #304]	@ (8002898 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d10f      	bne.n	8002792 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002772:	4b49      	ldr	r3, [pc, #292]	@ (8002898 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d109      	bne.n	8002792 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002782:	e006      	b.n	8002792 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	73fb      	strb	r3, [r7, #15]
      break;
 8002788:	e004      	b.n	8002794 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800278a:	bf00      	nop
 800278c:	e002      	b.n	8002794 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800278e:	bf00      	nop
 8002790:	e000      	b.n	8002794 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002792:	bf00      	nop
    }

    if(status == HAL_OK)
 8002794:	7bfb      	ldrb	r3, [r7, #15]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d10d      	bne.n	80027b6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800279a:	4b3f      	ldr	r3, [pc, #252]	@ (8002898 <RCCEx_PLLSAI2_Config+0x1b8>)
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6819      	ldr	r1, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	3b01      	subs	r3, #1
 80027ac:	011b      	lsls	r3, r3, #4
 80027ae:	430b      	orrs	r3, r1
 80027b0:	4939      	ldr	r1, [pc, #228]	@ (8002898 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027b2:	4313      	orrs	r3, r2
 80027b4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80027b6:	7bfb      	ldrb	r3, [r7, #15]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d167      	bne.n	800288c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80027bc:	4b36      	ldr	r3, [pc, #216]	@ (8002898 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a35      	ldr	r2, [pc, #212]	@ (8002898 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027c8:	f7fe fa58 	bl	8000c7c <HAL_GetTick>
 80027cc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80027ce:	e009      	b.n	80027e4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80027d0:	f7fe fa54 	bl	8000c7c <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d902      	bls.n	80027e4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	73fb      	strb	r3, [r7, #15]
        break;
 80027e2:	e005      	b.n	80027f0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80027e4:	4b2c      	ldr	r3, [pc, #176]	@ (8002898 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d1ef      	bne.n	80027d0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80027f0:	7bfb      	ldrb	r3, [r7, #15]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d14a      	bne.n	800288c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d111      	bne.n	8002820 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80027fc:	4b26      	ldr	r3, [pc, #152]	@ (8002898 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027fe:	695b      	ldr	r3, [r3, #20]
 8002800:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002804:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	6892      	ldr	r2, [r2, #8]
 800280c:	0211      	lsls	r1, r2, #8
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	68d2      	ldr	r2, [r2, #12]
 8002812:	0912      	lsrs	r2, r2, #4
 8002814:	0452      	lsls	r2, r2, #17
 8002816:	430a      	orrs	r2, r1
 8002818:	491f      	ldr	r1, [pc, #124]	@ (8002898 <RCCEx_PLLSAI2_Config+0x1b8>)
 800281a:	4313      	orrs	r3, r2
 800281c:	614b      	str	r3, [r1, #20]
 800281e:	e011      	b.n	8002844 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002820:	4b1d      	ldr	r3, [pc, #116]	@ (8002898 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002822:	695b      	ldr	r3, [r3, #20]
 8002824:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002828:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	6892      	ldr	r2, [r2, #8]
 8002830:	0211      	lsls	r1, r2, #8
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	6912      	ldr	r2, [r2, #16]
 8002836:	0852      	lsrs	r2, r2, #1
 8002838:	3a01      	subs	r2, #1
 800283a:	0652      	lsls	r2, r2, #25
 800283c:	430a      	orrs	r2, r1
 800283e:	4916      	ldr	r1, [pc, #88]	@ (8002898 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002840:	4313      	orrs	r3, r2
 8002842:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002844:	4b14      	ldr	r3, [pc, #80]	@ (8002898 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a13      	ldr	r2, [pc, #76]	@ (8002898 <RCCEx_PLLSAI2_Config+0x1b8>)
 800284a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800284e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002850:	f7fe fa14 	bl	8000c7c <HAL_GetTick>
 8002854:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002856:	e009      	b.n	800286c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002858:	f7fe fa10 	bl	8000c7c <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	2b02      	cmp	r3, #2
 8002864:	d902      	bls.n	800286c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	73fb      	strb	r3, [r7, #15]
          break;
 800286a:	e005      	b.n	8002878 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800286c:	4b0a      	ldr	r3, [pc, #40]	@ (8002898 <RCCEx_PLLSAI2_Config+0x1b8>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d0ef      	beq.n	8002858 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002878:	7bfb      	ldrb	r3, [r7, #15]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d106      	bne.n	800288c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800287e:	4b06      	ldr	r3, [pc, #24]	@ (8002898 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002880:	695a      	ldr	r2, [r3, #20]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	695b      	ldr	r3, [r3, #20]
 8002886:	4904      	ldr	r1, [pc, #16]	@ (8002898 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002888:	4313      	orrs	r3, r2
 800288a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800288c:	7bfb      	ldrb	r3, [r7, #15]
}
 800288e:	4618      	mov	r0, r3
 8002890:	3710      	adds	r7, #16
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	40021000 	.word	0x40021000

0800289c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d101      	bne.n	80028ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e040      	b.n	8002930 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d106      	bne.n	80028c4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f7fe f8aa 	bl	8000a18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2224      	movs	r2, #36	@ 0x24
 80028c8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f022 0201 	bic.w	r2, r2, #1
 80028d8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d002      	beq.n	80028e8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f000 fae0 	bl	8002ea8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f000 f825 	bl	8002938 <UART_SetConfig>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d101      	bne.n	80028f8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e01b      	b.n	8002930 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	685a      	ldr	r2, [r3, #4]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002906:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	689a      	ldr	r2, [r3, #8]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002916:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f042 0201 	orr.w	r2, r2, #1
 8002926:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f000 fb5f 	bl	8002fec <UART_CheckIdleState>
 800292e:	4603      	mov	r3, r0
}
 8002930:	4618      	mov	r0, r3
 8002932:	3708      	adds	r7, #8
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002938:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800293c:	b08a      	sub	sp, #40	@ 0x28
 800293e:	af00      	add	r7, sp, #0
 8002940:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002942:	2300      	movs	r3, #0
 8002944:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	689a      	ldr	r2, [r3, #8]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	691b      	ldr	r3, [r3, #16]
 8002950:	431a      	orrs	r2, r3
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	695b      	ldr	r3, [r3, #20]
 8002956:	431a      	orrs	r2, r3
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	69db      	ldr	r3, [r3, #28]
 800295c:	4313      	orrs	r3, r2
 800295e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	4ba4      	ldr	r3, [pc, #656]	@ (8002bf8 <UART_SetConfig+0x2c0>)
 8002968:	4013      	ands	r3, r2
 800296a:	68fa      	ldr	r2, [r7, #12]
 800296c:	6812      	ldr	r2, [r2, #0]
 800296e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002970:	430b      	orrs	r3, r1
 8002972:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	68da      	ldr	r2, [r3, #12]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	430a      	orrs	r2, r1
 8002988:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a99      	ldr	r2, [pc, #612]	@ (8002bfc <UART_SetConfig+0x2c4>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d004      	beq.n	80029a4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	6a1b      	ldr	r3, [r3, #32]
 800299e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029a0:	4313      	orrs	r3, r2
 80029a2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029b4:	430a      	orrs	r2, r1
 80029b6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a90      	ldr	r2, [pc, #576]	@ (8002c00 <UART_SetConfig+0x2c8>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d126      	bne.n	8002a10 <UART_SetConfig+0xd8>
 80029c2:	4b90      	ldr	r3, [pc, #576]	@ (8002c04 <UART_SetConfig+0x2cc>)
 80029c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029c8:	f003 0303 	and.w	r3, r3, #3
 80029cc:	2b03      	cmp	r3, #3
 80029ce:	d81b      	bhi.n	8002a08 <UART_SetConfig+0xd0>
 80029d0:	a201      	add	r2, pc, #4	@ (adr r2, 80029d8 <UART_SetConfig+0xa0>)
 80029d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029d6:	bf00      	nop
 80029d8:	080029e9 	.word	0x080029e9
 80029dc:	080029f9 	.word	0x080029f9
 80029e0:	080029f1 	.word	0x080029f1
 80029e4:	08002a01 	.word	0x08002a01
 80029e8:	2301      	movs	r3, #1
 80029ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029ee:	e116      	b.n	8002c1e <UART_SetConfig+0x2e6>
 80029f0:	2302      	movs	r3, #2
 80029f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029f6:	e112      	b.n	8002c1e <UART_SetConfig+0x2e6>
 80029f8:	2304      	movs	r3, #4
 80029fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029fe:	e10e      	b.n	8002c1e <UART_SetConfig+0x2e6>
 8002a00:	2308      	movs	r3, #8
 8002a02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a06:	e10a      	b.n	8002c1e <UART_SetConfig+0x2e6>
 8002a08:	2310      	movs	r3, #16
 8002a0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a0e:	e106      	b.n	8002c1e <UART_SetConfig+0x2e6>
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a7c      	ldr	r2, [pc, #496]	@ (8002c08 <UART_SetConfig+0x2d0>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d138      	bne.n	8002a8c <UART_SetConfig+0x154>
 8002a1a:	4b7a      	ldr	r3, [pc, #488]	@ (8002c04 <UART_SetConfig+0x2cc>)
 8002a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a20:	f003 030c 	and.w	r3, r3, #12
 8002a24:	2b0c      	cmp	r3, #12
 8002a26:	d82d      	bhi.n	8002a84 <UART_SetConfig+0x14c>
 8002a28:	a201      	add	r2, pc, #4	@ (adr r2, 8002a30 <UART_SetConfig+0xf8>)
 8002a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a2e:	bf00      	nop
 8002a30:	08002a65 	.word	0x08002a65
 8002a34:	08002a85 	.word	0x08002a85
 8002a38:	08002a85 	.word	0x08002a85
 8002a3c:	08002a85 	.word	0x08002a85
 8002a40:	08002a75 	.word	0x08002a75
 8002a44:	08002a85 	.word	0x08002a85
 8002a48:	08002a85 	.word	0x08002a85
 8002a4c:	08002a85 	.word	0x08002a85
 8002a50:	08002a6d 	.word	0x08002a6d
 8002a54:	08002a85 	.word	0x08002a85
 8002a58:	08002a85 	.word	0x08002a85
 8002a5c:	08002a85 	.word	0x08002a85
 8002a60:	08002a7d 	.word	0x08002a7d
 8002a64:	2300      	movs	r3, #0
 8002a66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a6a:	e0d8      	b.n	8002c1e <UART_SetConfig+0x2e6>
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a72:	e0d4      	b.n	8002c1e <UART_SetConfig+0x2e6>
 8002a74:	2304      	movs	r3, #4
 8002a76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a7a:	e0d0      	b.n	8002c1e <UART_SetConfig+0x2e6>
 8002a7c:	2308      	movs	r3, #8
 8002a7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a82:	e0cc      	b.n	8002c1e <UART_SetConfig+0x2e6>
 8002a84:	2310      	movs	r3, #16
 8002a86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a8a:	e0c8      	b.n	8002c1e <UART_SetConfig+0x2e6>
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a5e      	ldr	r2, [pc, #376]	@ (8002c0c <UART_SetConfig+0x2d4>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d125      	bne.n	8002ae2 <UART_SetConfig+0x1aa>
 8002a96:	4b5b      	ldr	r3, [pc, #364]	@ (8002c04 <UART_SetConfig+0x2cc>)
 8002a98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a9c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002aa0:	2b30      	cmp	r3, #48	@ 0x30
 8002aa2:	d016      	beq.n	8002ad2 <UART_SetConfig+0x19a>
 8002aa4:	2b30      	cmp	r3, #48	@ 0x30
 8002aa6:	d818      	bhi.n	8002ada <UART_SetConfig+0x1a2>
 8002aa8:	2b20      	cmp	r3, #32
 8002aaa:	d00a      	beq.n	8002ac2 <UART_SetConfig+0x18a>
 8002aac:	2b20      	cmp	r3, #32
 8002aae:	d814      	bhi.n	8002ada <UART_SetConfig+0x1a2>
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d002      	beq.n	8002aba <UART_SetConfig+0x182>
 8002ab4:	2b10      	cmp	r3, #16
 8002ab6:	d008      	beq.n	8002aca <UART_SetConfig+0x192>
 8002ab8:	e00f      	b.n	8002ada <UART_SetConfig+0x1a2>
 8002aba:	2300      	movs	r3, #0
 8002abc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ac0:	e0ad      	b.n	8002c1e <UART_SetConfig+0x2e6>
 8002ac2:	2302      	movs	r3, #2
 8002ac4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ac8:	e0a9      	b.n	8002c1e <UART_SetConfig+0x2e6>
 8002aca:	2304      	movs	r3, #4
 8002acc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ad0:	e0a5      	b.n	8002c1e <UART_SetConfig+0x2e6>
 8002ad2:	2308      	movs	r3, #8
 8002ad4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ad8:	e0a1      	b.n	8002c1e <UART_SetConfig+0x2e6>
 8002ada:	2310      	movs	r3, #16
 8002adc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ae0:	e09d      	b.n	8002c1e <UART_SetConfig+0x2e6>
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a4a      	ldr	r2, [pc, #296]	@ (8002c10 <UART_SetConfig+0x2d8>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d125      	bne.n	8002b38 <UART_SetConfig+0x200>
 8002aec:	4b45      	ldr	r3, [pc, #276]	@ (8002c04 <UART_SetConfig+0x2cc>)
 8002aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002af2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002af6:	2bc0      	cmp	r3, #192	@ 0xc0
 8002af8:	d016      	beq.n	8002b28 <UART_SetConfig+0x1f0>
 8002afa:	2bc0      	cmp	r3, #192	@ 0xc0
 8002afc:	d818      	bhi.n	8002b30 <UART_SetConfig+0x1f8>
 8002afe:	2b80      	cmp	r3, #128	@ 0x80
 8002b00:	d00a      	beq.n	8002b18 <UART_SetConfig+0x1e0>
 8002b02:	2b80      	cmp	r3, #128	@ 0x80
 8002b04:	d814      	bhi.n	8002b30 <UART_SetConfig+0x1f8>
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d002      	beq.n	8002b10 <UART_SetConfig+0x1d8>
 8002b0a:	2b40      	cmp	r3, #64	@ 0x40
 8002b0c:	d008      	beq.n	8002b20 <UART_SetConfig+0x1e8>
 8002b0e:	e00f      	b.n	8002b30 <UART_SetConfig+0x1f8>
 8002b10:	2300      	movs	r3, #0
 8002b12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b16:	e082      	b.n	8002c1e <UART_SetConfig+0x2e6>
 8002b18:	2302      	movs	r3, #2
 8002b1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b1e:	e07e      	b.n	8002c1e <UART_SetConfig+0x2e6>
 8002b20:	2304      	movs	r3, #4
 8002b22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b26:	e07a      	b.n	8002c1e <UART_SetConfig+0x2e6>
 8002b28:	2308      	movs	r3, #8
 8002b2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b2e:	e076      	b.n	8002c1e <UART_SetConfig+0x2e6>
 8002b30:	2310      	movs	r3, #16
 8002b32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b36:	e072      	b.n	8002c1e <UART_SetConfig+0x2e6>
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a35      	ldr	r2, [pc, #212]	@ (8002c14 <UART_SetConfig+0x2dc>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d12a      	bne.n	8002b98 <UART_SetConfig+0x260>
 8002b42:	4b30      	ldr	r3, [pc, #192]	@ (8002c04 <UART_SetConfig+0x2cc>)
 8002b44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b48:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b4c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002b50:	d01a      	beq.n	8002b88 <UART_SetConfig+0x250>
 8002b52:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002b56:	d81b      	bhi.n	8002b90 <UART_SetConfig+0x258>
 8002b58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b5c:	d00c      	beq.n	8002b78 <UART_SetConfig+0x240>
 8002b5e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b62:	d815      	bhi.n	8002b90 <UART_SetConfig+0x258>
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d003      	beq.n	8002b70 <UART_SetConfig+0x238>
 8002b68:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b6c:	d008      	beq.n	8002b80 <UART_SetConfig+0x248>
 8002b6e:	e00f      	b.n	8002b90 <UART_SetConfig+0x258>
 8002b70:	2300      	movs	r3, #0
 8002b72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b76:	e052      	b.n	8002c1e <UART_SetConfig+0x2e6>
 8002b78:	2302      	movs	r3, #2
 8002b7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b7e:	e04e      	b.n	8002c1e <UART_SetConfig+0x2e6>
 8002b80:	2304      	movs	r3, #4
 8002b82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b86:	e04a      	b.n	8002c1e <UART_SetConfig+0x2e6>
 8002b88:	2308      	movs	r3, #8
 8002b8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b8e:	e046      	b.n	8002c1e <UART_SetConfig+0x2e6>
 8002b90:	2310      	movs	r3, #16
 8002b92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b96:	e042      	b.n	8002c1e <UART_SetConfig+0x2e6>
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a17      	ldr	r2, [pc, #92]	@ (8002bfc <UART_SetConfig+0x2c4>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d13a      	bne.n	8002c18 <UART_SetConfig+0x2e0>
 8002ba2:	4b18      	ldr	r3, [pc, #96]	@ (8002c04 <UART_SetConfig+0x2cc>)
 8002ba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ba8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002bac:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002bb0:	d01a      	beq.n	8002be8 <UART_SetConfig+0x2b0>
 8002bb2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002bb6:	d81b      	bhi.n	8002bf0 <UART_SetConfig+0x2b8>
 8002bb8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002bbc:	d00c      	beq.n	8002bd8 <UART_SetConfig+0x2a0>
 8002bbe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002bc2:	d815      	bhi.n	8002bf0 <UART_SetConfig+0x2b8>
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d003      	beq.n	8002bd0 <UART_SetConfig+0x298>
 8002bc8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bcc:	d008      	beq.n	8002be0 <UART_SetConfig+0x2a8>
 8002bce:	e00f      	b.n	8002bf0 <UART_SetConfig+0x2b8>
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002bd6:	e022      	b.n	8002c1e <UART_SetConfig+0x2e6>
 8002bd8:	2302      	movs	r3, #2
 8002bda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002bde:	e01e      	b.n	8002c1e <UART_SetConfig+0x2e6>
 8002be0:	2304      	movs	r3, #4
 8002be2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002be6:	e01a      	b.n	8002c1e <UART_SetConfig+0x2e6>
 8002be8:	2308      	movs	r3, #8
 8002bea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002bee:	e016      	b.n	8002c1e <UART_SetConfig+0x2e6>
 8002bf0:	2310      	movs	r3, #16
 8002bf2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002bf6:	e012      	b.n	8002c1e <UART_SetConfig+0x2e6>
 8002bf8:	efff69f3 	.word	0xefff69f3
 8002bfc:	40008000 	.word	0x40008000
 8002c00:	40013800 	.word	0x40013800
 8002c04:	40021000 	.word	0x40021000
 8002c08:	40004400 	.word	0x40004400
 8002c0c:	40004800 	.word	0x40004800
 8002c10:	40004c00 	.word	0x40004c00
 8002c14:	40005000 	.word	0x40005000
 8002c18:	2310      	movs	r3, #16
 8002c1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a9f      	ldr	r2, [pc, #636]	@ (8002ea0 <UART_SetConfig+0x568>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d17a      	bne.n	8002d1e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002c28:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002c2c:	2b08      	cmp	r3, #8
 8002c2e:	d824      	bhi.n	8002c7a <UART_SetConfig+0x342>
 8002c30:	a201      	add	r2, pc, #4	@ (adr r2, 8002c38 <UART_SetConfig+0x300>)
 8002c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c36:	bf00      	nop
 8002c38:	08002c5d 	.word	0x08002c5d
 8002c3c:	08002c7b 	.word	0x08002c7b
 8002c40:	08002c65 	.word	0x08002c65
 8002c44:	08002c7b 	.word	0x08002c7b
 8002c48:	08002c6b 	.word	0x08002c6b
 8002c4c:	08002c7b 	.word	0x08002c7b
 8002c50:	08002c7b 	.word	0x08002c7b
 8002c54:	08002c7b 	.word	0x08002c7b
 8002c58:	08002c73 	.word	0x08002c73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c5c:	f7ff f8d6 	bl	8001e0c <HAL_RCC_GetPCLK1Freq>
 8002c60:	61f8      	str	r0, [r7, #28]
        break;
 8002c62:	e010      	b.n	8002c86 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c64:	4b8f      	ldr	r3, [pc, #572]	@ (8002ea4 <UART_SetConfig+0x56c>)
 8002c66:	61fb      	str	r3, [r7, #28]
        break;
 8002c68:	e00d      	b.n	8002c86 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c6a:	f7ff f837 	bl	8001cdc <HAL_RCC_GetSysClockFreq>
 8002c6e:	61f8      	str	r0, [r7, #28]
        break;
 8002c70:	e009      	b.n	8002c86 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002c76:	61fb      	str	r3, [r7, #28]
        break;
 8002c78:	e005      	b.n	8002c86 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002c84:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	f000 80fb 	beq.w	8002e84 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	685a      	ldr	r2, [r3, #4]
 8002c92:	4613      	mov	r3, r2
 8002c94:	005b      	lsls	r3, r3, #1
 8002c96:	4413      	add	r3, r2
 8002c98:	69fa      	ldr	r2, [r7, #28]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d305      	bcc.n	8002caa <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002ca4:	69fa      	ldr	r2, [r7, #28]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d903      	bls.n	8002cb2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002cb0:	e0e8      	b.n	8002e84 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	461c      	mov	r4, r3
 8002cb8:	4615      	mov	r5, r2
 8002cba:	f04f 0200 	mov.w	r2, #0
 8002cbe:	f04f 0300 	mov.w	r3, #0
 8002cc2:	022b      	lsls	r3, r5, #8
 8002cc4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002cc8:	0222      	lsls	r2, r4, #8
 8002cca:	68f9      	ldr	r1, [r7, #12]
 8002ccc:	6849      	ldr	r1, [r1, #4]
 8002cce:	0849      	lsrs	r1, r1, #1
 8002cd0:	2000      	movs	r0, #0
 8002cd2:	4688      	mov	r8, r1
 8002cd4:	4681      	mov	r9, r0
 8002cd6:	eb12 0a08 	adds.w	sl, r2, r8
 8002cda:	eb43 0b09 	adc.w	fp, r3, r9
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	603b      	str	r3, [r7, #0]
 8002ce6:	607a      	str	r2, [r7, #4]
 8002ce8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002cec:	4650      	mov	r0, sl
 8002cee:	4659      	mov	r1, fp
 8002cf0:	f7fd fa6a 	bl	80001c8 <__aeabi_uldivmod>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	460b      	mov	r3, r1
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002d02:	d308      	bcc.n	8002d16 <UART_SetConfig+0x3de>
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002d0a:	d204      	bcs.n	8002d16 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	60da      	str	r2, [r3, #12]
 8002d14:	e0b6      	b.n	8002e84 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002d1c:	e0b2      	b.n	8002e84 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	69db      	ldr	r3, [r3, #28]
 8002d22:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d26:	d15e      	bne.n	8002de6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8002d28:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002d2c:	2b08      	cmp	r3, #8
 8002d2e:	d828      	bhi.n	8002d82 <UART_SetConfig+0x44a>
 8002d30:	a201      	add	r2, pc, #4	@ (adr r2, 8002d38 <UART_SetConfig+0x400>)
 8002d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d36:	bf00      	nop
 8002d38:	08002d5d 	.word	0x08002d5d
 8002d3c:	08002d65 	.word	0x08002d65
 8002d40:	08002d6d 	.word	0x08002d6d
 8002d44:	08002d83 	.word	0x08002d83
 8002d48:	08002d73 	.word	0x08002d73
 8002d4c:	08002d83 	.word	0x08002d83
 8002d50:	08002d83 	.word	0x08002d83
 8002d54:	08002d83 	.word	0x08002d83
 8002d58:	08002d7b 	.word	0x08002d7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d5c:	f7ff f856 	bl	8001e0c <HAL_RCC_GetPCLK1Freq>
 8002d60:	61f8      	str	r0, [r7, #28]
        break;
 8002d62:	e014      	b.n	8002d8e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d64:	f7ff f868 	bl	8001e38 <HAL_RCC_GetPCLK2Freq>
 8002d68:	61f8      	str	r0, [r7, #28]
        break;
 8002d6a:	e010      	b.n	8002d8e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d6c:	4b4d      	ldr	r3, [pc, #308]	@ (8002ea4 <UART_SetConfig+0x56c>)
 8002d6e:	61fb      	str	r3, [r7, #28]
        break;
 8002d70:	e00d      	b.n	8002d8e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d72:	f7fe ffb3 	bl	8001cdc <HAL_RCC_GetSysClockFreq>
 8002d76:	61f8      	str	r0, [r7, #28]
        break;
 8002d78:	e009      	b.n	8002d8e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002d7e:	61fb      	str	r3, [r7, #28]
        break;
 8002d80:	e005      	b.n	8002d8e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8002d82:	2300      	movs	r3, #0
 8002d84:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002d8c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d077      	beq.n	8002e84 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	005a      	lsls	r2, r3, #1
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	085b      	lsrs	r3, r3, #1
 8002d9e:	441a      	add	r2, r3
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002da8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	2b0f      	cmp	r3, #15
 8002dae:	d916      	bls.n	8002dde <UART_SetConfig+0x4a6>
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002db6:	d212      	bcs.n	8002dde <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	f023 030f 	bic.w	r3, r3, #15
 8002dc0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	085b      	lsrs	r3, r3, #1
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	f003 0307 	and.w	r3, r3, #7
 8002dcc:	b29a      	uxth	r2, r3
 8002dce:	8afb      	ldrh	r3, [r7, #22]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	8afa      	ldrh	r2, [r7, #22]
 8002dda:	60da      	str	r2, [r3, #12]
 8002ddc:	e052      	b.n	8002e84 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002de4:	e04e      	b.n	8002e84 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002de6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002dea:	2b08      	cmp	r3, #8
 8002dec:	d827      	bhi.n	8002e3e <UART_SetConfig+0x506>
 8002dee:	a201      	add	r2, pc, #4	@ (adr r2, 8002df4 <UART_SetConfig+0x4bc>)
 8002df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002df4:	08002e19 	.word	0x08002e19
 8002df8:	08002e21 	.word	0x08002e21
 8002dfc:	08002e29 	.word	0x08002e29
 8002e00:	08002e3f 	.word	0x08002e3f
 8002e04:	08002e2f 	.word	0x08002e2f
 8002e08:	08002e3f 	.word	0x08002e3f
 8002e0c:	08002e3f 	.word	0x08002e3f
 8002e10:	08002e3f 	.word	0x08002e3f
 8002e14:	08002e37 	.word	0x08002e37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e18:	f7fe fff8 	bl	8001e0c <HAL_RCC_GetPCLK1Freq>
 8002e1c:	61f8      	str	r0, [r7, #28]
        break;
 8002e1e:	e014      	b.n	8002e4a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e20:	f7ff f80a 	bl	8001e38 <HAL_RCC_GetPCLK2Freq>
 8002e24:	61f8      	str	r0, [r7, #28]
        break;
 8002e26:	e010      	b.n	8002e4a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e28:	4b1e      	ldr	r3, [pc, #120]	@ (8002ea4 <UART_SetConfig+0x56c>)
 8002e2a:	61fb      	str	r3, [r7, #28]
        break;
 8002e2c:	e00d      	b.n	8002e4a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e2e:	f7fe ff55 	bl	8001cdc <HAL_RCC_GetSysClockFreq>
 8002e32:	61f8      	str	r0, [r7, #28]
        break;
 8002e34:	e009      	b.n	8002e4a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002e3a:	61fb      	str	r3, [r7, #28]
        break;
 8002e3c:	e005      	b.n	8002e4a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002e48:	bf00      	nop
    }

    if (pclk != 0U)
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d019      	beq.n	8002e84 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	085a      	lsrs	r2, r3, #1
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	441a      	add	r2, r3
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e62:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e64:	69bb      	ldr	r3, [r7, #24]
 8002e66:	2b0f      	cmp	r3, #15
 8002e68:	d909      	bls.n	8002e7e <UART_SetConfig+0x546>
 8002e6a:	69bb      	ldr	r3, [r7, #24]
 8002e6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e70:	d205      	bcs.n	8002e7e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	b29a      	uxth	r2, r3
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	60da      	str	r2, [r3, #12]
 8002e7c:	e002      	b.n	8002e84 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2200      	movs	r2, #0
 8002e88:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002e90:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3728      	adds	r7, #40	@ 0x28
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e9e:	bf00      	nop
 8002ea0:	40008000 	.word	0x40008000
 8002ea4:	00f42400 	.word	0x00f42400

08002ea8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eb4:	f003 0308 	and.w	r3, r3, #8
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d00a      	beq.n	8002ed2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	430a      	orrs	r2, r1
 8002ed0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed6:	f003 0301 	and.w	r3, r3, #1
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d00a      	beq.n	8002ef4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	430a      	orrs	r2, r1
 8002ef2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef8:	f003 0302 	and.w	r3, r3, #2
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d00a      	beq.n	8002f16 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	430a      	orrs	r2, r1
 8002f14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f1a:	f003 0304 	and.w	r3, r3, #4
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d00a      	beq.n	8002f38 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	430a      	orrs	r2, r1
 8002f36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f3c:	f003 0310 	and.w	r3, r3, #16
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d00a      	beq.n	8002f5a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	430a      	orrs	r2, r1
 8002f58:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f5e:	f003 0320 	and.w	r3, r3, #32
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d00a      	beq.n	8002f7c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	430a      	orrs	r2, r1
 8002f7a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d01a      	beq.n	8002fbe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	430a      	orrs	r2, r1
 8002f9c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fa2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002fa6:	d10a      	bne.n	8002fbe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	430a      	orrs	r2, r1
 8002fbc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d00a      	beq.n	8002fe0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	430a      	orrs	r2, r1
 8002fde:	605a      	str	r2, [r3, #4]
  }
}
 8002fe0:	bf00      	nop
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b098      	sub	sp, #96	@ 0x60
 8002ff0:	af02      	add	r7, sp, #8
 8002ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002ffc:	f7fd fe3e 	bl	8000c7c <HAL_GetTick>
 8003000:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0308 	and.w	r3, r3, #8
 800300c:	2b08      	cmp	r3, #8
 800300e:	d12e      	bne.n	800306e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003010:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003014:	9300      	str	r3, [sp, #0]
 8003016:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003018:	2200      	movs	r2, #0
 800301a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 f88c 	bl	800313c <UART_WaitOnFlagUntilTimeout>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d021      	beq.n	800306e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003030:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003032:	e853 3f00 	ldrex	r3, [r3]
 8003036:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003038:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800303a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800303e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	461a      	mov	r2, r3
 8003046:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003048:	647b      	str	r3, [r7, #68]	@ 0x44
 800304a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800304c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800304e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003050:	e841 2300 	strex	r3, r2, [r1]
 8003054:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003056:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003058:	2b00      	cmp	r3, #0
 800305a:	d1e6      	bne.n	800302a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2220      	movs	r2, #32
 8003060:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e062      	b.n	8003134 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0304 	and.w	r3, r3, #4
 8003078:	2b04      	cmp	r3, #4
 800307a:	d149      	bne.n	8003110 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800307c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003080:	9300      	str	r3, [sp, #0]
 8003082:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003084:	2200      	movs	r2, #0
 8003086:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f000 f856 	bl	800313c <UART_WaitOnFlagUntilTimeout>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d03c      	beq.n	8003110 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800309c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800309e:	e853 3f00 	ldrex	r3, [r3]
 80030a2:	623b      	str	r3, [r7, #32]
   return(result);
 80030a4:	6a3b      	ldr	r3, [r7, #32]
 80030a6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80030aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	461a      	mov	r2, r3
 80030b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80030b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80030b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030b8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80030ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80030bc:	e841 2300 	strex	r3, r2, [r1]
 80030c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80030c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d1e6      	bne.n	8003096 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	3308      	adds	r3, #8
 80030ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	e853 3f00 	ldrex	r3, [r3]
 80030d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f023 0301 	bic.w	r3, r3, #1
 80030de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	3308      	adds	r3, #8
 80030e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80030e8:	61fa      	str	r2, [r7, #28]
 80030ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ec:	69b9      	ldr	r1, [r7, #24]
 80030ee:	69fa      	ldr	r2, [r7, #28]
 80030f0:	e841 2300 	strex	r3, r2, [r1]
 80030f4:	617b      	str	r3, [r7, #20]
   return(result);
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d1e5      	bne.n	80030c8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2220      	movs	r2, #32
 8003100:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800310c:	2303      	movs	r3, #3
 800310e:	e011      	b.n	8003134 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2220      	movs	r2, #32
 8003114:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2220      	movs	r2, #32
 800311a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003132:	2300      	movs	r3, #0
}
 8003134:	4618      	mov	r0, r3
 8003136:	3758      	adds	r7, #88	@ 0x58
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	60b9      	str	r1, [r7, #8]
 8003146:	603b      	str	r3, [r7, #0]
 8003148:	4613      	mov	r3, r2
 800314a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800314c:	e04f      	b.n	80031ee <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003154:	d04b      	beq.n	80031ee <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003156:	f7fd fd91 	bl	8000c7c <HAL_GetTick>
 800315a:	4602      	mov	r2, r0
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	69ba      	ldr	r2, [r7, #24]
 8003162:	429a      	cmp	r2, r3
 8003164:	d302      	bcc.n	800316c <UART_WaitOnFlagUntilTimeout+0x30>
 8003166:	69bb      	ldr	r3, [r7, #24]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d101      	bne.n	8003170 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800316c:	2303      	movs	r3, #3
 800316e:	e04e      	b.n	800320e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0304 	and.w	r3, r3, #4
 800317a:	2b00      	cmp	r3, #0
 800317c:	d037      	beq.n	80031ee <UART_WaitOnFlagUntilTimeout+0xb2>
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	2b80      	cmp	r3, #128	@ 0x80
 8003182:	d034      	beq.n	80031ee <UART_WaitOnFlagUntilTimeout+0xb2>
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	2b40      	cmp	r3, #64	@ 0x40
 8003188:	d031      	beq.n	80031ee <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	69db      	ldr	r3, [r3, #28]
 8003190:	f003 0308 	and.w	r3, r3, #8
 8003194:	2b08      	cmp	r3, #8
 8003196:	d110      	bne.n	80031ba <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2208      	movs	r2, #8
 800319e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80031a0:	68f8      	ldr	r0, [r7, #12]
 80031a2:	f000 f838 	bl	8003216 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2208      	movs	r2, #8
 80031aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e029      	b.n	800320e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	69db      	ldr	r3, [r3, #28]
 80031c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80031c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80031c8:	d111      	bne.n	80031ee <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80031d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80031d4:	68f8      	ldr	r0, [r7, #12]
 80031d6:	f000 f81e 	bl	8003216 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2220      	movs	r2, #32
 80031de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2200      	movs	r2, #0
 80031e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e00f      	b.n	800320e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	69da      	ldr	r2, [r3, #28]
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	4013      	ands	r3, r2
 80031f8:	68ba      	ldr	r2, [r7, #8]
 80031fa:	429a      	cmp	r2, r3
 80031fc:	bf0c      	ite	eq
 80031fe:	2301      	moveq	r3, #1
 8003200:	2300      	movne	r3, #0
 8003202:	b2db      	uxtb	r3, r3
 8003204:	461a      	mov	r2, r3
 8003206:	79fb      	ldrb	r3, [r7, #7]
 8003208:	429a      	cmp	r2, r3
 800320a:	d0a0      	beq.n	800314e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800320c:	2300      	movs	r3, #0
}
 800320e:	4618      	mov	r0, r3
 8003210:	3710      	adds	r7, #16
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}

08003216 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003216:	b480      	push	{r7}
 8003218:	b095      	sub	sp, #84	@ 0x54
 800321a:	af00      	add	r7, sp, #0
 800321c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003224:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003226:	e853 3f00 	ldrex	r3, [r3]
 800322a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800322c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800322e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003232:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	461a      	mov	r2, r3
 800323a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800323c:	643b      	str	r3, [r7, #64]	@ 0x40
 800323e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003240:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003242:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003244:	e841 2300 	strex	r3, r2, [r1]
 8003248:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800324a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800324c:	2b00      	cmp	r3, #0
 800324e:	d1e6      	bne.n	800321e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	3308      	adds	r3, #8
 8003256:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003258:	6a3b      	ldr	r3, [r7, #32]
 800325a:	e853 3f00 	ldrex	r3, [r3]
 800325e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	f023 0301 	bic.w	r3, r3, #1
 8003266:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	3308      	adds	r3, #8
 800326e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003270:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003272:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003274:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003276:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003278:	e841 2300 	strex	r3, r2, [r1]
 800327c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800327e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003280:	2b00      	cmp	r3, #0
 8003282:	d1e5      	bne.n	8003250 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003288:	2b01      	cmp	r3, #1
 800328a:	d118      	bne.n	80032be <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	e853 3f00 	ldrex	r3, [r3]
 8003298:	60bb      	str	r3, [r7, #8]
   return(result);
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	f023 0310 	bic.w	r3, r3, #16
 80032a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	461a      	mov	r2, r3
 80032a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032aa:	61bb      	str	r3, [r7, #24]
 80032ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032ae:	6979      	ldr	r1, [r7, #20]
 80032b0:	69ba      	ldr	r2, [r7, #24]
 80032b2:	e841 2300 	strex	r3, r2, [r1]
 80032b6:	613b      	str	r3, [r7, #16]
   return(result);
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d1e6      	bne.n	800328c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2220      	movs	r2, #32
 80032c2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80032d2:	bf00      	nop
 80032d4:	3754      	adds	r7, #84	@ 0x54
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr

080032de <memset>:
 80032de:	4402      	add	r2, r0
 80032e0:	4603      	mov	r3, r0
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d100      	bne.n	80032e8 <memset+0xa>
 80032e6:	4770      	bx	lr
 80032e8:	f803 1b01 	strb.w	r1, [r3], #1
 80032ec:	e7f9      	b.n	80032e2 <memset+0x4>
	...

080032f0 <__libc_init_array>:
 80032f0:	b570      	push	{r4, r5, r6, lr}
 80032f2:	4d0d      	ldr	r5, [pc, #52]	@ (8003328 <__libc_init_array+0x38>)
 80032f4:	4c0d      	ldr	r4, [pc, #52]	@ (800332c <__libc_init_array+0x3c>)
 80032f6:	1b64      	subs	r4, r4, r5
 80032f8:	10a4      	asrs	r4, r4, #2
 80032fa:	2600      	movs	r6, #0
 80032fc:	42a6      	cmp	r6, r4
 80032fe:	d109      	bne.n	8003314 <__libc_init_array+0x24>
 8003300:	4d0b      	ldr	r5, [pc, #44]	@ (8003330 <__libc_init_array+0x40>)
 8003302:	4c0c      	ldr	r4, [pc, #48]	@ (8003334 <__libc_init_array+0x44>)
 8003304:	f000 f818 	bl	8003338 <_init>
 8003308:	1b64      	subs	r4, r4, r5
 800330a:	10a4      	asrs	r4, r4, #2
 800330c:	2600      	movs	r6, #0
 800330e:	42a6      	cmp	r6, r4
 8003310:	d105      	bne.n	800331e <__libc_init_array+0x2e>
 8003312:	bd70      	pop	{r4, r5, r6, pc}
 8003314:	f855 3b04 	ldr.w	r3, [r5], #4
 8003318:	4798      	blx	r3
 800331a:	3601      	adds	r6, #1
 800331c:	e7ee      	b.n	80032fc <__libc_init_array+0xc>
 800331e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003322:	4798      	blx	r3
 8003324:	3601      	adds	r6, #1
 8003326:	e7f2      	b.n	800330e <__libc_init_array+0x1e>
 8003328:	080033a0 	.word	0x080033a0
 800332c:	080033a0 	.word	0x080033a0
 8003330:	080033a0 	.word	0x080033a0
 8003334:	080033a4 	.word	0x080033a4

08003338 <_init>:
 8003338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800333a:	bf00      	nop
 800333c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800333e:	bc08      	pop	{r3}
 8003340:	469e      	mov	lr, r3
 8003342:	4770      	bx	lr

08003344 <_fini>:
 8003344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003346:	bf00      	nop
 8003348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800334a:	bc08      	pop	{r3}
 800334c:	469e      	mov	lr, r3
 800334e:	4770      	bx	lr
